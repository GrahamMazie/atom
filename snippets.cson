'.source.apache-config': 

    'Cache-Control' :
        'prefix' : 'cache-control'
        'body' : """
            # BEGIN Cache-Control
            <IfModule mod_headers.c>
                Header set Connection keep-alive

                # 1 Month
                <filesMatch "\.(ico|pdf|flv|jpg|jpeg|png|gif|js|swf)$">
                    Header set Cache-Control "max-age=2592000, public"
                </filesMatch>

                # 1 Month
                <filesMatch "\.(css)$">
                    Header set Cache-Control "max-age=2592000, public, must-revalidate"
                </filesMatch>

                # 1 Month
                <filesMatch "\.(xml|txt)$">
                    Header set Cache-Control "max-age=2592000, public, must-revalidate"
                </filesMatch>

                # 1 Month
                <filesMatch "\.(html|htm)$">
                    Header set Cache-Control "max-age=2592000, must-revalidate"
                </filesMatch>

                <FilesMatch "\.(gif|jpg|png|ico|css|js|pdf|txt)$">
                    Header append Cache-Control "public"
                </FilesMatch>
            </IfModule>
            # END Cache-Control
        """

    'Expires' :
        'prefix' : 'expires'
        'body' : """
            # BEGIN Expires
            <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css "access 1 month"
            ExpiresByType text/html "access 1 month"
            ExpiresByType image/gif "access 1 year"
            ExpiresByType image/png "access 1 year"
            ExpiresByType image/jpg "access 1 year"
            ExpiresByType image/jpeg "access 1 year"
            ExpiresByType image/x-icon "access 1 year"
            ExpiresByType application/pdf "access 1 month"
            ExpiresByType application/javascript "access 1 month"
            ExpiresByType text/x-javascript "access 1 month"
            ExpiresByType application/x-shockwave-flash "access 1 month"
            ExpiresDefault "access 1 month"
            </IfModule>
            # END Expires
        """

    'GZip' :
        'prefix' : 'gzip-compression'
        'body' : """
            # BEGIN GZip
            AddOutputFilterByType DEFLATE text/plain
            AddOutputFilterByType DEFLATE text/html
            AddOutputFilterByType DEFLATE text/xml
            AddOutputFilterByType DEFLATE text/css
            AddOutputFilterByType DEFLATE application/xml
            AddOutputFilterByType DEFLATE application/xhtml+xml
            AddOutputFilterByType DEFLATE application/rss+xml
            AddOutputFilterByType DEFLATE application/javascript
            AddOutputFilterByType DEFLATE application/x-javascript
            AddType x-font/otf .otf
            AddType x-font/ttf .ttf
            AddType x-font/eot .eot
            AddType x-font/woff .woff
            AddType image/x-icon .ico
            AddType image/png .png
            # END GZip
        """

'.source.coffee': 

    'New Snippet' :
        'prefix' : 'snip'
        'body' : """
            '${1:Name}' :
                'prefix' : '${2:prefix}'
                'voiceCommand' : '$3'
                'body' : \"\"\"
                    ${4:The snippet...}
                \"\"\"
        """

'.source.css, .source.scss': 

    '@font-face' :
        'prefix' : 'fontface'
        'body' : """
            @font-face {
                font-family: '${1:font-family}';
                font-weight: ${2:normal};
                font-style: ${3:normal};
                src: url('${4:path/to/eot/typeface}'); /* IE9 Compat Modes */
                src: url('${4:path/to/eot/typeface}?#iefix') format('embedded-opentype'), /* IE6-IE8 */
                     url('${5:path/to/woff/typeface}') format('woff'), /* Pretty Modern Browsers */
                     url('${6:path/to/ttf/typeface}') format('truetype');  /* Safari, Android, iOS */
            }$7
        """

    'Name' :
        'prefix' : 'hubl-style-guide'
        'body' : """
            /* Colors
            ------------------------------------------------------------------------------*/
            {% set color_primary_1 = '' %}
            {% set color_primary_2 = '' %}
            {% set color_primary_3 = '' %}
            {% set color_secondary_1 = '' %}
            {% set color_secondary_2 = '' %}

            /* Fonts
            ------------------------------------------------------------------------------*/
            {% set font_stack_primary = 'Arial' %}
            {% set font_stack_secondary = 'Times New Roman' %}

            /* Layout
            ------------------------------------------------------------------------------*/
            {% set contain_max_width = 1100 %}

            /* Responsive Stuff
            ------------------------------------------------------------------------------*/
            {% set screen_lg = 1200 %}
            {% set screen_md = 992 %}
            {% set screen_sm = 768 %}
            {% set screen_xs = 480 %}

            /* Typography
            ------------------------------------------------------------------------------*/
            {% set paragraph_font_size = 16 %}
            {% set paragraph_margin_bottom = 20 %}

            /* Buttons
            ------------------------------------------------------------------------------*/
            {% set btn_font_size = 18 %}
            {% set btn_height = 55 %}
            {% set btn_line_height = 1.5 %}
            {% set btn_min_width = 220 %}

            {% set btn_lg_font_size = 20 %}
            {% set btn_lg_height = 55 %}
            {% set btn_lg_min_width = 300 %}

            {% set btn_sm_font_size = 16 %}
            {% set btn_sm_height = 40 %}
            {% set btn_sm_min_width = 220 %}

            {% set btn_xs_font_size = 14 %}
            {% set btn_xs_height = 40 %}
            {% set btn_xs_min_width = 220 %}

            /* Masthead
            ------------------------------------------------------------------------------*/
            {% set masthead_height_lg = 100 %}
            {% set masthead_height_md = 100 %}
            {% set masthead_height_sm = 100 %}
            {% set masthead_height_xs = 80 %}

            {% set masthead_logo_height_lg = 40 %}
            {% set masthead_logo_height_md = 40 %}
            {% set masthead_logo_height_sm = 40 %}
            {% set masthead_logo_height_xs = 40 %}

            /* Reset
            ------------------------------------------------------------------------------*/
            body {
                font-family: {{ font_stack_primary }};
            	line-height: 1.5em;

            }
            h1, h2, h3, h4, h5, h6 {
                padding: 0;
            	margin: 0;
            }
            input, select, textarea, button {
            	outline: 0;
            	border: 0;
            }
            select {
            	appearance: none;
            	-moz-appearance: none;
            	-webkit-appearance: none;
            	width: 100%;
            }

            /* Typography
            ------------------------------------------------------------------------------*/
            .headline-1,
            .content-area h1 {
                font-size: 48px;
                margin: 0 0 30px 0;
            }
            .headline-2,
            .content-area h2 {
                font-size: 36px;
                margin: 0 0 30px 0;
            }
            .headline-3,
            .content-area h3 {
                font-size: 24px;
                margin: 0 0 24px 0;
            }
            .paragraph,
            .content-area p,
            .content-area ul,
            .content-area ol,
            .content-area h4,
            .content-area h5,
            .content-area h6 {
                font-size: 16px;
                margin: 0 0 15px 0;
            }
            .paragraph-small {
            }
            .hyperlink
            .content-area a {
                font-size: 16px;
                color: blue;
            }
            .blockqoute
            .content-area blockqoute {
                color: grey;
            }
            .content-area h4,
            .content-area h5,
            .content-area h6 {
                font-weight: bold;
            }
            .content-area img {
                max-width: 100%;
                height: auto;
            }
            .content-area ul,
            .content-area ol {
                margin: 0 0 20px 20px;
                padding: 0;
            }
            .content-area ul li,
            .content-area ol li {
                margin: 0;
            }

            /* Default Button Styling
            ------------------------------------------------------------------------------*/
            .btn,
            .btn-lg,
            .btn-sm,
            .btn-xs {
                transition: 0.5s all ease;
                border-radius: 1px;
                cursor: pointer;
                display: inline-block;
                text-align: center;
                text-decoration: none !important;
            	outline: 0;
            	border: 0;
            	box-shadow: none;
                line-height: {{ btn_line_height + 'em' }};
            }

            /* Custom Buttons
            ------------------------------------------------------------------------------*/
            .btn-primary {
                background-color: {{ color_primary_1 }};
                border: 1px solid {{ color_primary_1 }};
            }

            /* Button Sizing
            ------------------------------------------------------------------------------*/
            .btn {
            	font-size: {{ btn_font_size + 'px' }};
            	padding: {{ ((btn_height - (btn_font_size * btn_line_height)) / 2) + 'px' }} 40px;
            	min-width: {{ btn_min_width + 'px' }};
            }
            .btn-lg {
                font-size: {{ btn_lg_font_size + 'px' }};
            	padding: {{ ((btn_lg_height - (btn_lg_font_size * btn_line_height)) / 2) + 'px' }} 40px;
            	min-width: {{ btn_lg_min_width + 'px' }};
            }
            .btn-sm {
                font-size: {{ btn_sm_font_size + 'px' }};
                padding: {{ ((btn_sm_height - (btn_sm_font_size * btn_line_height)) / 2) + 'px' }} 40px;
            	min-width: {{ btn_sm_min_width + 'px' }};
            }
            .btn-xs {
                font-size: {{ btn_xs_font_size + 'px' }};
                padding: {{ ((btn_xs_height - (btn_xs_font_size * btn_line_height)) / 2) + 'px' }} 40px;
                min-width: {{ btn_xs_min_width + 'px' }};
            }

            /* Utility Classes
            ------------------------------------------------------------------------------*/
            .wrapper {
                padding: 40px 0;
            }
            .contain,
            .contain-md,
            .contain-sm,
            .contain-xs {
                margin: 0 auto;
                padding: 0 15px;
                max-width: {{ contain_max_width + 'px' }}
            }
            .contain-md {
                max-width: {{ screen_md + 'px' }};
            }
            .contain-sm {
                max-width: {{ screen_sm + 'px' }}
            }
            .contain-xs {
                max-width: {{ screen_xs + 'px' }}
            }
            .row {
                margin: 0;
            }
            .background-image {
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
            }
            .list-inline {
                list-style-type: none;
                margin: 0;
            }
            .list-inline li {
                display: inline-block;
            }
            .no-padding {
                padding: 0 !important;
            }
            .overlay {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
            }
            .text-center {
                text-align: center;
            }
            .vertical-align-outer {
                display: table;
                width: 100%;
            }
            .vertical-align-inner {
                display: table-cell;
                vertical-align: middle;
                position: relative;
                width: 100%;
            }

            /* Header
            ------------------------------------------------------------------------------*/
            .masthead {
                border-bottom: 1px solid #ebebeb;
                height: {{ masthead_height_md + 'px' }};
                line-height: {{ masthead_height_md + 'px' }};
            }
            .masthead .logo {
                float: left;
                line-height: normal;
            }
            .masthead .logo img {
                margin: {{ ((masthead_height_md - masthead_logo_height_md) / 2) + 'px' }} 0 0 0;
                height: {{ masthead_logo_height_md + 'px' }};
                width: auto;
            }
            .masthead .hamburger {
                padding: 0;
                float: right;
                height: {{ masthead_height_md + 'px' }};
                line-height: {{ masthead_height_md + 'px' }};
            }
            @media (max-width: {{ screen_sm + 'px' }}) {
                .masthead {
                    height:  {{ masthead_height_sm + 'px' }};
                    line-height: {{ masthead_height_sm + 'px' }};
                }
                .masthead .logo img {
                    margin: {{ ((masthead_height_sm - masthead_logo_height_sm) / 2) + 'px' }} 0 0 0;
                    height: {{ masthead_logo_height_sm + 'px' }};
                }
                .masthead .hamburger {
                    height: {{ masthead_height_sm + 'px' }};
                    line-height: {{ masthead_height_sm + 'px' }};
                }
            }
            @media (max-width: {{ screen_xs + 'px' }}) {
                .masthead {
                    height:  {{ masthead_height_xs + 'px' }};
                    line-height: {{ masthead_height_xs + 'px' }};
                }
                .masthead .logo img {
                    margin: {{ ((masthead_height_xs - masthead_logo_height_xs) / 2) + 'px' }} 0 0 0;
                    height: {{ masthead_logo_height_xs + 'px' }};
                }
                .masthead .hamburger {
                    height: {{ masthead_height_xs + 'px' }};
                    line-height: {{ masthead_height_xs + 'px' }};
                }
            }
        """

    'WordPress Style' :
        'prefix': 'wp-style'
        'body': """
            /*
            Theme Name: ${1:Theme Name}
            Author: Ironpaper
            Author URI: http://ironpaper.com/
            Description: Custom theme by Ironpaper
            License: GNU General Public License v2 or later
            License URI: http://www.gnu.org/licenses/gpl-2.0.html
            Text Domain: ${2:themename}
            */
        """

'.text.html, .text.html.php': 

    'ACF CTA' :
        'prefix' : 'acf-cta'
        'body' : """
            <?php if ( get${1:_sub}_field( '${2:prefix_}use_hubspot_cta' ) ) : ?>
                <?php the${1:_sub}_field( '${2:prefix_}hubspot_cta' ); ?>
            <?php elseif ( get${1:_sub}_field( '${2:prefix_}cta_link' ) && get${1:_sub}_field( '${2:prefix_}cta_text' ) ) : ?>
                <a ${3:class="${4:btn btn-primary}"} href="<?php the${1:_sub}_field( '${2:prefix_}cta_link' ); ?>"><?php the${1:_sub}_field( '${2:prefix_}cta_text' ); ?></a>
            <?php endif; ?>
        """

    'Get Datepicker Field' :
        'prefix' : 'acf-get-field-datepicker'
        'body' : """
            <?php $${1:date} = new DateTime( get_field( '${1:date}' ) ); ?>
            <?php echo $${1:date}->format( '$2' ) ?>
        """

    'Get File' :
        'prefix' : 'acf-get-field-file'
        'body' : """
            <?php $${1:file} = get_${2:sub_}field( '${1:file}' ); ?>
            <?php if ( $${1:file} ) : ?>
                <a href="<?php echo $${1:file}['url']; ?>"><?php echo $${1:file}['filename']; ?></a>
            <?php endif; ?>$3
        """

    'Get Image' :
        'prefix' : 'acf-get-field-image'
        'body' : """
            <?php $image = get_field( '${1:field_name}' ); ?>
            <img class="img-responsive" src="<?php echo $image['sizes']['large']; ?>" alt="<?php echo $image['alt']; ?>">
        """

    'if ( get_field() ) { ...' :
        'prefix' : 'acf-if-get-field'
        'body' : """
            <?php if ( get_field( '${1:field_name}' ) ) : ?>
                ${2:<?php the_field( '${1:field_name}' ); ?>}
            <?php endif; ?>$3
        """

    'if ( get_sub_field() ) { ...' :
        'prefix' : 'acf-if-get-sub-field'
        'body' : """
            <?php if ( get_sub_field( '${1:field_name}' ) ) : ?>
                ${2:<?php the_sub_field( '${1:field_name}' ); ?>}
            <?php endif; ?>$3
        """

    'If Have Rows' :
        'prefix' : 'acf-if-have-rows'
        'body' : """
            <?php if ( have_rows( '${1:field_name}' ) ) : ?>
                <?php while ( have_rows( '${1:field_name}' ) ) : the_row(); ?>
                    ${2:}
                <?php endwhile; ?>
            <?php endif; ?>
        """

    'The Field' :
        'prefix' : 'acf-the-field'
        'body' : """
            <?php the_field( '$1' ); ?>
        """

    'The Sub Field' :
        'prefix' : 'acf-the-sub-field'
        'body' : """
            <?php the_sub_field( '${1:field_name}' ); ?>
        """

    'While Have Rows' :
        'prefix' : 'acf-while-have-rows'
        'body' : """
            <?php while ( have_rows( '${1:field_name}' ) ) : the_row(); ?>
                ${2:}
            <?php endwhile; ?>
        """

    'Background Slideshow' :
        'prefix' : 'bx-background-slideshow'
        'body' : """
            <div class="${1:background-slideshow}">
                <ul class="bxslider">
                    <li class="background-image" style="background-image: url()"></li>
                </ul>
            </div><!-- .${1:background-slideshow} -->
        """

    'New BXSlider' :
        'prefix' : 'bx-new'
        'body' : """
        <ul id="" class="bxslider">
            <li><img src="" alt=""></li>
        </ul>
        """

    'Column' :
        'prefix' : 'col'
        'body' : """
            <div class="col-${1:md}-${2:12}">
                $3
            </div>
        """

    'Contain' :
        'prefix' : 'contain'
        'body' : """
            <div class="contain$1">
                $2
            </div><!-- .contain$1 -->
            $3
        """

    'foreach' :
        'prefix' : 'foreach'
        'body' : """
            <?php foreach ( $${1:variable} as $${2:key} => $${3:value} ) : ?>
                $4
            <?php endforeach; ?>$5
        """

    'New Hamburger' :
        'prefix' : 'hamburger'
        'body' : """
            <button class="hamburger hamburger--${1:hamburger-type} ${2: is-active}" type="button">
                <span class="hamburger-box">
                    <span class="hamburger-inner"></span>
                </span>
            </button>
        """

    '<div>' :
        'prefix' : 'div-tag'
        'voiceCommand' : 'Div Tag'
        'body' : """
            <div${1: class="$2"}>$3</div>${1:<!-- .$2 -->}$4
        """

    '<h1>' :
        'prefix' : 'h1-tag'
        'voiceCommand' : 'H1 Tag'
        'body' : """
            <h1${1: class="$2"}>$3</h1>$4
        """

    '<h2>' :
        'prefix' : 'h2-tag'
        'voiceCommand' : 'H2 Tag'
        'body' : """
            <h2${1: class="$2"}>$3</h2>$4
        """

    '<h3>' :
        'prefix' : 'h3-tag'
        'voiceCommand' : 'H3 Tag'
        'body' : """
            <h3${1: class="$2"}>$3</h3>$4
        """

    '<?php' :
        'prefix' : 'php-tag'
        'body' : """
            <?php
        
            $1
        """

    '<span>' :
        'prefix' : 'span-tag'
        'voiceCommand' : 'Span Tag'
        'body' : """
            <span${1: class="$2"}>$3</span>$4
        """

    'Pagination' :
        'prefix' : 'hubl-pagination'
        'body' : """
            {% set total_pages = contents.total_page_count %}
            {% set more_pages = total_pages - current_page_num %}

            {% if total_pages > 1 %}
                <nav>
                    <ul class="pagination">

                        {% if more_pages == 0 %}
                            {% if current_page_num - 4 == 1 %}
                                <li><a href="{{ group.absolute_url }}">{{ current_page_num - 4 }}</a></li>
                            {% endif %}
                            {% if current_page_num - 4 > 1 %}
                                <li><a href="{{ blog_page_link(current_page_num - 4) }}">{{ current_page_num - 4 }}</a></li>
                            {% endif %}
                        {% endif %}

                        {% if more_pages <= 1 %}
                            {% if current_page_num - 3 == 1 %}<li><a href="{{ group.absolute_url }}">{{ current_page_num - 3 }}</a></li>{% endif %}
                            {% if current_page_num - 3 > 1 %}<li><a href="{{ blog_page_link(current_page_num - 3) }}">{{ current_page_num - 3 }}</a></li>{% endif %}
                        {% endif %}

                        {% if current_page_num - 2 == 1 %}
                            <li><a href="{{ group.absolute_url }}">{{ current_page_num - 2 }}</a></li>
                        {% endif %}

                        {% if current_page_num - 2 > 1 %}
                            <li><a href="{{ blog_page_link(current_page_num - 2) }}">{{ current_page_num - 2 }}</a></li>
                        {% endif %}

                        {% if current_page_num - 1 == 1 %}
                            <li><a href="{{ group.absolute_url }}">{{ current_page_num - 1 }}</a></li>
                        {% endif %}

                        {% if current_page_num - 1 > 1 %}
                            <li><a href="{{ blog_page_link(current_page_num - 1) }}">{{ current_page_num - 1 }}</a></li>
                        {% endif %}

                        <li class="active"><a href="{% if current_page_num==1 %}{{ group.absolute_url }}{% else %}{{ blog_page_link(current_page_num) }}{% endif %}">{{ current_page_num }}</a></li>

                        {% if current_page_num + 1 <= total_pages %}
                            <li><a href="{{ blog_page_link(current_page_num + 1) }}">{{ current_page_num + 1 }}</a></li>
                        {% endif %}

                        {% if current_page_num + 2 <= total_pages %}
                            <li><a href="{{ blog_page_link(current_page_num + 2) }}">{{ current_page_num + 2 }}</a></li>
                        {% endif %}

                        {% if current_page_num <= 2 %}
                            {% if current_page_num + 3 <= total_pages %}<li><a href="{{ blog_page_link(current_page_num + 3) }}">{{ current_page_num + 3 }}</a></li>{% endif %}
                        {% endif %}

                        {% if current_page_num == 1 %}
                            {% if current_page_num + 4 <= total_pages %}<li><a href="{{ blog_page_link(current_page_num + 4) }}">{{ current_page_num + 4 }}</a></li>{% endif %}
                        {% endif %}

                        {% if current_page_num != 1 %}
                            <li class="previous"><a href="{% if last_page_num=="1" %}{{ group.absolute_url }}{% else %}{{blog_page_link(last_page_num)}}{% endif %}">Previous</a></li>
                        {% endif %}

                        {% if current_page_num != total_pages %}
                            <li class="next"><a href="{{blog_page_link(next_page_num)}}">Next</a></li>
                        {% endif %}

                        {% if total_pages > 1 && current_page_num != total_pages %}
                            <li><a href="{{ group.absolute_url }}/page/{{ total_pages }}">Last</a></li>
                        {% endif %}
                    </ul><!-- .pagination -->
                </nav>
            {% endif %}
        """

    'hubl-partial-hero' :
        'prefix' : 'hubl-partial-hero'
        'body' : """
            <div id="hero-${1:default}" class="hero-wrapper background-image" style="background-image: url({% image_src 'hero_image', label='Hero Image', no_wrapper=True %});">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="vertical-align-outer">
                                <div class="vertical-align-inner">
                                    <h1 class="hero-title">{% text 'hero_title', label='Hero Title', no_wrapper=True %}</h1>
                                    <div class="hero-description">{% text 'hero_description', label='Hero Description', no_wrapper=True %}</div>
                                </div><!-- .vertical-align-inner -->
                            </div><!-- .vertical-align-outer -->
                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- #hero-${1:default} .hero-wrapper .background-image -->
        """

    'huble-related-posts' :
        'prefix' : 'related-posts'
        'body' : """
            {% set topics = content.topic_list %}
            {% set topics_count = content.topic_list|length %}
            {% set related_posts = [] %}
            {% set max_posts = 3 %}
            {% set count = 0 %}

            {% if topics_count >= 1 %}
            	{% set topic_1 = (topics|last).slug %}
            	{% set topics = topics|batch(topics|length - 1)|first %}
            {% endif %}

            {% if topics_count >= 2 %}
            	{% set topic_2 = (topics|last).slug %}
            	{% set topics = topics|batch(topics|length - 1)|first %}
            {% endif %}

            {% if topics_count >= 3 %}
            	{% set topic_3 = (topics|last).slug %}
            	{% set topics = topics|batch(topics|length - 1)|first %}
            {% endif %}

            {% if topics_count >= 4 %}
            	{% set topic_4 = (topics|last).slug %}
            	{% set topics = topics|batch(topics|length - 1)|first %}
            {% endif %}

            {% if topics_count >= 5 %}
            	{% set topic_5 = (topics|last).slug %}
            	{% set topics = topics|batch(topics|length - 1)|first %}
            {% endif %}

            {% if topic_1 %}
            	{% set topic_1_blog_1 = blog_recent_topic_posts('4572013066', topic_1, 1) %}
            	{% set topic_1_blog_2 = blog_recent_topic_posts('4646923443', topic_1, 1) %}
            	{% set topic_1_blog_3 = blog_recent_topic_posts('4646889878', topic_1, 1) %}
            	{% set topic_1_blog_4 = blog_recent_topic_posts('4635828357', topic_1, 1) %}
            	{% set topic_1_blog_5 = blog_recent_topic_posts('4680128700', topic_1, 1) %}
            	{% set related_posts = related_posts + topic_1_blog_1 + topic_1_blog_2 + topic_1_blog_3 + topic_1_blog_4 + topic_1_blog_5 %}
            {% endif %}

            {% if topic_2 %}
            	{% set topic_2_blog_1 = blog_recent_topic_posts('4572013066', topic_2, 1) %}
            	{% set topic_2_blog_2 = blog_recent_topic_posts('4646923443', topic_2, 1) %}
            	{% set topic_2_blog_3 = blog_recent_topic_posts('4646889878', topic_2, 1) %}
            	{% set topic_2_blog_4 = blog_recent_topic_posts('4635828357', topic_2, 1) %}
            	{% set topic_2_blog_5 = blog_recent_topic_posts('4680128700', topic_2, 1) %}
            	{% set related_posts = related_posts + topic_2_blog_1 + topic_2_blog_2 + topic_2_blog_3 + topic_2_blog_4 + topic_2_blog_5 %}
            {% endif %}

            {% if topic_3 %}
            	{% set topic_3_blog_1 = blog_recent_topic_posts('4572013066', topic_3, 1) %}
            	{% set topic_3_blog_2 = blog_recent_topic_posts('4646923443', topic_3, 1) %}
            	{% set topic_3_blog_3 = blog_recent_topic_posts('4646889878', topic_3, 1) %}
            	{% set topic_3_blog_4 = blog_recent_topic_posts('4635828357', topic_3, 1) %}
            	{% set topic_3_blog_5 = blog_recent_topic_posts('4680128700', topic_3, 1) %}
            	{% set related_posts = related_posts + topic_3_blog_1 + topic_3_blog_2 + topic_3_blog_3 + topic_3_blog_4 + topic_3_blog_5 %}
            {% endif %}

            {% if topic_4 %}
            	{% set topic_4_blog_1 = blog_recent_topic_posts('4572013066', topic_4, 1) %}
            	{% set topic_4_blog_2 = blog_recent_topic_posts('4646923443', topic_4, 1) %}
            	{% set topic_4_blog_3 = blog_recent_topic_posts('4646889878', topic_4, 1) %}
            	{% set topic_4_blog_4 = blog_recent_topic_posts('4635828357', topic_4, 1) %}
            	{% set topic_4_blog_5 = blog_recent_topic_posts('4680128700', topic_4, 1) %}
            	{% set related_posts = related_posts + topic_4_blog_1 + topic_4_blog_2 + topic_4_blog_3 + topic_4_blog_4 + topic_4_blog_5 %}
            {% endif %}

            {% if topic_5 %}
            	{% set topic_5_blog_1 = blog_recent_topic_posts('4572013066', topic_5, 1) %}
            	{% set topic_5_blog_2 = blog_recent_topic_posts('4646923443', topic_5, 1) %}
            	{% set topic_5_blog_3 = blog_recent_topic_posts('4646889878', topic_5, 1) %}
            	{% set topic_5_blog_4 = blog_recent_topic_posts('4635828357', topic_5, 1) %}
            	{% set topic_5_blog_5 = blog_recent_topic_posts('4680128700', topic_5, 1) %}
            	{% set related_posts = related_posts + topic_5_blog_1 + topic_5_blog_2 + topic_5_blog_3 + topic_5_blog_4 + topic_5_blog_5 %}
            {% endif %}

            {% set related_posts = related_posts|sort(true, false, 'publish_date')|unique('name') %}

            <div class="row">

            	{% for post in related_posts %}
            		{% if post.absolute_url != content.absolute_url && count < max_posts %}
                        {{ post }}
            			{% set count = count + 1 %}
            		{% endif %}
            	{% endfor %}

            </div>
        """

    'Blog Listing' :
        'prefix' : 'hubl-tpl-blog-listing'
        'body' : """
            <!doctype html>
            <html itemscope itemtype="http://schema.org/Blog">
            <head>
                <meta charset="utf-8">
                <title>{{ content.html_title }}</title>
                <meta name="description" content="{{ content.meta_description }}">
                {{ standard_header_includes }}
            </head>

            <body>

            {% include "custom/system/global/header.html" %}

            <div class="blog-listing-wrapper wrapper">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-12">

                            {% for content in contents %}

                                <article class="blog-item" itemprop="blogPost" itemscope itemtype="http://schema.org/BlogPosting">
                                    <h3 class="headline" itemprop="headline"><a href="{{ content.absolute_url }}" itemprop="mainEntityOfPage">{{ content.name }}</a></h3>
                                    <p class="author">By <span itemprop="author">{{ content.blog_post_author }}</span></p>
                                    <time class="date-published" itemprop="datePublished" content="{{ content.publish_date_localized }}">{{ content.publish_date_localized }}</time>
                                    <div class="image-wrapper" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
                                        <a href="{{ content.absolute_url }}"><img class="image" src="{{ content.featured_image }}" alt="{{ content.featured_image_alt_text }}" width="" height=""></a>
                                        <meta class="hidden" itemprop="url" content="{{ content.featured_image }}">
                                        <meta class="hidden" itemprop="width" content="">
                                        <meta class="hidden" itemprop="height" content="">
                                    </div>
                                    <div class="article-body" itemprop="articleBody">
                                        <p>{{ content.post_summary|striptags }}</p>
                                    </div>
                                    <a class="read-more-link" href="{{ content.absolute_url }}">Read more</a>
                                    <ul class="topics">
                                        {% for topic in content.topic_list %}
                                            <li><a href="{{ group.absolute_url }}/topic/{{topic.slug}}">{{ topic.name }}</a>{% if loop.index != content.topic_list|length %}, {% endif %}</li>
                                        {% endfor %}
                                    </ul>
                                    <time class="hidden" itemprop="dateModified" content="{{ content.updated|datetimeformat('%m/%d/%Y %H:%M:%S') }}">{{ content.updated|datetimeformat('%m/%d/%Y %H:%M:%S') }}</time>
                                    <div class="hidden" itemprop="publisher" itemscope="" itemtype="http://schema.org/Organization">
                                        <span itemprop="name"></span>
                                        <span itemprop="logo" itemscope="" itemtype="http://schema.org/ImageObject">
                                            <meta itemprop="url" content="">
                                        </span>
                                    </div>
                                </article><!-- .blog-item -->

                            {% endfor %}

                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- .blog-listing-wrapper .wrapper -->

            {% include "custom/system/global/footer.html" %}

            {{ standard_footer_includes }}

            </body>
            </html>

        """

    'Single Blog' :
        'prefix' : 'hubl-tpl-single-blog'
        'body' : """
            <!doctype html>
            <html itemscope itemtype="http://schema.org/Article">
            <head>
                <meta charset="utf-8">
                <title>{{ content.html_title }}</title>
                <meta name="description" content="{{ content.meta_description }}">
                {{ standard_header_includes }}
            </head>

            <body>

            {% include "custom/system/global/header.html" %}

            <div class="breadcrumbs-wrapper wrapper">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-12">

                            <ol class="breadcrumbs" itemscope="" itemtype="http://schema.org/BreadcrumbList">
                                <li class="breadcrumb" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                                    <a itemscope="" itemtype="http://schema.org/Thing" itemprop="item" href="{{ group.absolute_url }}">
                                        <span itemprop="name">Blog</span>
                                    </a>
                                    <meta itemprop="position" content="1">
                                </li>
                                <span class="sep">></span>
                                <li class="breadcrumb" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                                    <a itemscope="" itemtype="http://schema.org/Thing" itemprop="item" href="#">
                                        <span itemprop="name">{{ content.name }}</span>
                                    </a>
                                    <meta itemprop="position" content="2">
                                </li>
                            </ol>

                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- .breadcrumbs-wrapper .wrapper -->

            <div class="single-blog-wrapper wrapper">
                <div class="contain">

                    <div class="row">
                        <div class="col-md-12">
                            <article>
                                <h1 class="headline" itemprop="headline"><a href="{{ content.absolute_url }}" itemprop="mainEntityOfPage">{{ content.name }}</a></h1>
                                <p class="author">By <span itemprop="author">{{ content.blog_post_author }}</span></p>
                                <time class="date-published" itemprop="datePublished" content="{{ content.publish_date_localized }}">{{ content.publish_date_localized }}</time>
                                <div class="article-body" itemprop="articleBody">{{ content.post_body }}</div>
                                <ul class="topics">
                                    {% for topic in content.topic_list %}
                                        <li><a href="{{ group.absolute_url }}/topic/{{topic.slug}}">{{ topic.name }}</a>{% if loop.index != content.topic_list|length %}, {% endif %}</li>
                                    {% endfor %}
                                </ul>
                                <div class="hidden" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
                                    <meta itemprop="url" content="{{ content.featured_image }}">
                                    <meta itemprop="width" content="">
                                    <meta itemprop="height" content="">
                                </div>
                                <time class="hidden" itemprop="dateModified" content="{{ content.updated|datetimeformat('%m/%d/%Y %H:%M:%S') }}">{{ content.updated|datetimeformat('%m/%d/%Y %H:%M:%S') }}</time>
                                <div class="hidden" itemprop="publisher" itemscope="" itemtype="http://schema.org/Organization">
                                    <span itemprop="name"></span>
                                    <span itemprop="logo" itemscope="" itemtype="http://schema.org/ImageObject">
                                        <meta itemprop="url" content="">
                                    </span>
                                </div>
                            </article>
                        </div>
                    </div><!-- .row -->

                    <div class="row">
                        <div class="col-md-12">
                            <div class="comments">
                                <h1>Leave a Comment</h1>
                                <hr class="header-title-border">
                                {% blog_comments "blog_comments_display" %}
                            </div>
                        </div>
                    </div><!-- .row -->

                </div><!-- .contain -->
            </div><!-- .single-blog-wrapper .wrapper -->

            {% include "custom/system/global/footer.html" %}

            {{ standard_footer_includes }}

            </body>
            </html>
        """

    'Echo String' :
        'prefix' : 'pll-e'
        'body' : """
            <?php pll_e( '${1:Some text here...}' ); ?>
        """

    'Row' :
        'prefix' : 'row'
        'body' : """
            <div class="row">
                $1
            </div><!-- .row -->
        """

    'Schema' :
        'prefix' : 'schema-address'
        'body' : """
            <address itemprop="address" itemscope itemtype="http://schema.org/PostalAddress">
                <span class="street-address" itemprop="streetAddress">${1:555 8th Avenue #1509}</span>
                <span class="locality" itemprop="addressLocality">${2:New York}</span>
                <span class="region" itemprop="addressRegion">${3:NY}</span>
                <span class="postal-code" itemprop="postalCode">${4:10018}</span>
            </address>
        """

    'Blog' :
        'prefix' : 'itemtype-blog'
        'body' : """
            <div itemscope itemtype="http://schema.org/Blog">
                $1
            </div>
        """

    'Blog Posting' :
        'prefix' : 'itemtype-blog-posting'
        'body' : """
            <article itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
                $1
            </article>
        """

    'Blog Listing' :
        'prefix' : 'itemtype-blog-listing'
        'body' : """
            <div itemscope itemtype="http://schema.org/Blog">
                <article itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
                    $1
                </article>
            </div>
        """

    'Image Object' :
        'prefix' : 'itemtype-image-object'
        'body' : """
            <div itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
                <img class="image" src="${1:path/to/image}" alt="$2" width="$3" height="$4">
                <meta class="hidden" itemprop="url" content="${1:path/to/image}">
                <meta class="hidden" itemprop="width" content="$3">
                <meta class="hidden" itemprop="height" content="$4">
            </div>$5
        """

    'Article body' :
        'prefix' : 'itemprop-article-body'
        'body' : """
            <div class="article-body" itemprop="articleBody">$1</div>$2
        """

    'Author' :
        'prefix' : 'itemprop-author'
        'body' : """
            <span class="author" itemprop="author">$1</span>$2
        """

    'Date Published' :
        'prefix' : 'itemprop-date-published'
        'body' : """
            <time class="date-published" itemprop="datePublished" content="$1">$2</time>$3
        """

    'Date Modified' :
        'prefix' : 'itemprop-date-modified'
        'body' : """
            <time class="hidden" itemprop="dateModified" content="$1">$2</time>$3
        """

    'Headline' :
        'prefix' : 'itemprop-headline'
        'body' : """
            <${1:h1} class="headline" itemprop="headline">$2</${1:h1}>$3
        """

    'Publisher' :
        'prefix' : 'itemprop-publisher'
        'body' : """
            <div itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
                <span itemprop="name"></span>
            </div>
        """
    'Description' :
        'prefix' : 'itemprop-description'
        'body' : """
            <${1:span} class="description" itemprop="description">$2</${1:span}>$3
        """

    'Thumbnail' :
        'prefix' : 'itemprop-thumbnail'
        'body' : """
            <img class="thumbnail" itemprop="thumbnail" src="$1"/>$2
        """

    'Vertical Align' :
        'prefix' : 'vertical-align'
        'body' : """
            <div class="vertical-align-outer">
                <div class="vertical-align-inner">
                    $1
                </div><!-- .vertical-align-inner -->
            </div><!-- .vertical-align-outer -->
        """

    'wp-ajax-form' :
        'prefix' : 'wp-ajax-form'
        'body' : """
            <form class="${1:form-class}" action="<?php echo admin_url( 'admin-ajax.php' ); ?>" method="${2:post}">
                <input type="hidden" name="action" value="${3:action}">
                <input type="hidden" name="wpnonce" value="<?php echo wp_create_nonce( '${3:action}' ); ?>">
                <input type="submit">
            </form>
        """

    'Do Shortcode' :
        'prefix' : 'wp-do-shortcode'
        'body' : """
            <?php do_shortcode( ${1:$content} ); ?>$2
        """

    'Get Attachement Filesize' :
        'prefix' : 'wp-get-attachement-filesize'
        'body' : """
             <?php $filesize_in_bytes = filesize( get_attached_file( ${1:$attachement->ID} ) ); ?>
             <?php $filesize_in_megabytes = round( $filesize_in_bytes / 1048576, 2 ); ?>
             <?php echo $filesize_in_megabytes . ' MB'; ?>
        """

    'Get Categories' :
        'prefix' : 'wp-get-categories'
        'body' : """
            <?php $categories = get_the_category( ${1:$post->ID} ); ?>
            <?php $category_slugs = array(); ?>
            <?php foreach ( $categories as $category ) : ?>
                <?php $category_slugs[] = $category->slug; ?>
            <?php endforeach; ?>
        """

    'Get Post Terms' :
        'prefix' : 'wp-get-post-terms'
        'body' : """
            <?php $${1:taxonomy}_terms = wp_get_post_terms( ${2:$post->ID}, '${1:taxonomy}', ${3:$args} ); ?>
            <?php foreach ( $${1:taxonomy}_terms as $${1:taxonomy}_term ) : ?>
                ${4:Your code here...}
            <?php endforeach; ?>
        """

    'Get Posts' :
        'prefix' : 'wp-get-posts'
        'body' : """
            <?php
        
            $${1:posts} = get_posts(array(
                'post_type' => '${1:posts}',
                $2
            ));

            ?>$3
        """

    'wp-get-img' :
        'prefix' : 'wp-get-template-directory-uri-img-tag'
        'body' : """
            <img src="<?php echo get_template_directory_uri(); ?>/img/${1:filename.png}" alt="">
        """

    'Get Template Directory URI' :
        'prefix' : 'wp-get-template-directory-uri'
        'body' : """
            <?php echo get_template_directory_uri(); ?>
        """

    'Get Template Part' :
        'prefix' : 'wp-get-template-part'
        'body' : """
            <?php get_template_part( 'partials/$1' ); ?>$2
        """

    'Get Terms' :
        'prefix' : 'wp-get-terms'
        'body' : """
            <?php
            $${1:taxonomy}_terms = get_terms(array(
                'taxonomy' => '$1',
                'hide_empty' => true,
            ));
            ?>
            <?php foreach ($${1:taxonomy}_terms as $${1:taxonomy}_term) : ?>
                ${2:Your code here...}
            <?php endforeach; ?>
        """

    '<?php if ( is_template() ) ...' :
        'prefix' : 'wp-if-is-template'
        'body' : """
            <?php if ( is_template( array( '$1' ) ) ) : ?>
                $2
            <?php endif; ?>$3
        """

    'local-sample.php' :
        'prefix' : 'wp-local-sample'
        'body' : """
            <?php

            /**
             * Choose to display server errors.
             */
            define( 'DISPLAY_ERRORS', true );

            if ( defined( 'DISPLAY_ERRORS' ) && DISPLAY_ERRORS ) {
            	error_reporting( -1 );
            	@ini_set( 'display_errors', 'On' );
            } else {
            	error_reporting(0);
            	@ini_set( 'display_errors', 0 );
            }

            /**
             * Replace attachment base url to point to a different host.
             */
            define( 'ATTACHMENT_URL', false );

            if ( defined( 'ATTACHMENT_URL' ) && ATTACHMENT_URL ) {
                function replace_attachment_url( $value ) {
                    return str_replace( home_url(), ATTACHMENT_URL, $value );
                }

                add_filter( 'acf/load_field', 'replace_attachment_url', 999999 );
                add_filter( 'wp_get_attachment_url', 'replace_attachment_url', 999999 );
            }
        """

    'Localize Script' :
        'prefix' : 'wp-localize-script'
        'body' : """
            <?php wp_localize_script( '${1:handle}', '${2:name}', $${3:data} ); ?>$4
        """

    'Hero w/ Background Video' :
        'prefix' : 'wp-partial-hero-video'
        'body' : """
            <?php

            /**
             * Hero w/ Background Video
             *
             * (1) In your mixins.scss, insert 'mixin-hero-height'... if not
             * already added.
             *
             * (2) Create a sass partial and insert 'wp-partial-hero-video' to add
             * styling for this partial.
             *
             * (3) Create an ACF json file named 'group_57e2e87bd658d.json' and
             * insert 'acf-json-hero-video'.
             */

            $hero_image = get_field('hero_image');
            $hero_title = get_field('hero_title');
            $hero_description = get_field('hero_description');

            $hero_video_mp4 = get_field('hero_video_mp4');
            $hero_video_webm = get_field('hero_video_mp4');

            ?>

            <div class="hero-wrapper-video background-image" style="background-image: url(<?php echo (is_array($hero_image)) ? $hero_image['sizes']['large'] : ''; ?>);">

                <div class="background-video">
                    <video playsinline autoplay muted loop>
                        <?php if ($hero_video_webm) : ?>
                            <source src="<?php echo $hero_video_webm; ?>" type="video/webm">
                        <?php endif; ?>
                        <?php if ($hero_video_mp4) : ?>
                            <source src="<?php echo $hero_video_mp4; ?>" type="video/mp4">
                        <?php endif; ?>
                    </video>
                </div><!-- .background-video -->

                <div class="contain">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="vertical-align-outer">
                                <div class="vertical-align-inner">
                                    <?php if ($hero_title) : ?>
                                        <h1 class="hero-title"><?php echo $hero_title; ?></h1>
                                    <?php else : ?>
                                        <h1 class="hero-title"><?php the_title(); ?></h1>
                                    <?php endif; ?>
                                    <?php if ($hero_description): ?>
                                        <div class="hero-description"><?php echo $hero_description; ?></div>
                                    <?php endif; ?>
                                </div><!-- .vertical-align-inner -->
                            </div><!-- .vertical-align-outer -->
                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->

            </div><!-- .hero-wrapper-video .background-image -->
        """

    'Hero' :
        'prefix' : 'wp-partial-hero'
        'body' : """
            <?php

            /**
             * ${1:Hero Name}
             * @uses 'hero-wrapper' Create a .scss partial and insert 'hero-wrapper' to
             * add styling for this hero. Hero name should correspond with the id of this
             * template.
             */

            $hero_image = get_field( 'hero_image' );

            if ( $hero_image ) {
                $hero_image = ( is_array( $hero_image ) ) ? $hero_image['sizes']['large'] : $hero_image;
            } else {
                $hero_image = get_template_directory_uri() . '/path/to/default/image';
            }

            ?>

            <div id="hero-${2:default}" class="hero-wrapper background-image" style="background-image: url(<?php echo $hero_image; ?>);">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-8">
            				<div class="vertical-align-outer">
            				    <div class="vertical-align-inner">
                                    <?php if ( get_field( 'hero_title' ) ) : ?>
                                        <h1 class="hero-title"><?php the_field( 'hero_title' ); ?></h1>
                                    <?php else : ?>
                                        <h1 class="hero-title"><?php the_title(); ?></h1>
                                    <?php endif; ?>
                                    <?php if ( get_field( 'hero_description' ) ) : ?>
                                        <div class="hero-description"><?php the_field( 'hero_description' ); ?></div>
                                    <?php endif; ?>
            				    </div><!-- .vertical-align-inner -->
            				</div><!-- .vertical-align-outer -->
                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- #hero-${2:default} .hero-wrapper .background-image -->
        """

    'Tabs' :
        'prefix' : 'wp-partial-tabs'
        'body' : """
            <div class="${1:tabs}-wrapper wrapper">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-12">
                            <?php $tabs = get_field( 'tabs_repeater' ); ?>
                            <ul id="${1:tabs}-pager" class="tab-pager">
                                <?php if ( $tabs ) : ?>
                                    <?php for ( $i = 0; $i < count( $tabs ); $i++ ) : ?>
                                        <li><a data-slide-index="<?php echo $i; ?>"><?php echo $tabs[$i]['title']; ?></a></li>
                                    <?php endfor; ?>
                                <?php endif; ?>
                            </ul>
                            <ul class="tab-content bxslider">
                                <?php if ( $tabs ) : ?>
                                    <?php for ( $i = 0; $i < count( $tabs ); $i++ ) : ?>
                                        <li class="tab content-area"><?php echo $tabs[$i]['wysiwyg_editor']; ?></li>
                                    <?php endfor; ?>
                                <?php endif; ?>
                            </ul>
                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- .${1:tabs}-wrapper .wrapper -->
        """

    'WP Query' :
        'prefix' : 'wp-query'
        'body' : """
            <?php

            $query = new WP_Query(array(
                ${1:/* Your query here... */}
            ));

            ?>

            <?php if ( $query->have_posts() ) : ?>
                <?php while ( $query->have_posts() ) : $query->the_post(); ?>
                    $2
                <?php endwhile; ?>
            <?php endif; ?>

            <?php wp_reset_query(); ?>
        """

    'The Loop' :
        'prefix' : 'wp-loop'
        'body' : """
            <?php if ( have_posts() ) : ?>
                <?php while ( have_posts() ) : the_post(); ?>
                    $1
                <?php endwhile; ?>
            <?php endif; ?>$2
        """

    'The Permalink' :
        'prefix' : 'wp-the-permalink'
        'body' : """
            <a href="<?php the_permalink(); ?>"${1: class="$2"}>$3</a>$4
        """

    '1-Column Template' :
        'prefix' : 'wp-tpl-1-column'
        'body' : """
            <?php

            /**
             * Template Name: 1-Column Template
             */

            get_header();

            ?>

            <?php if ( have_posts() ) : ?>
                <?php while ( have_posts() ) : the_post(); ?>

                    <div class="wrapper one-col-wrapper">
                        <div class="contain-xs">
                            <div class="row">
                               <main class="col-md-12 col-sm-12 col-xs-12">
                                    <article id="page-<?php echo get_the_ID(); ?>" class="content-area entry">
                                        <h1><?php the_title(); ?></h1>
                                        <?php the_content(); ?>
                                    </article><!-- .content-area -->
                                </main>
                            </div><!-- .row-->
                        </div><!--.contain-xs -->
                    </div><!-- .wrapper .one-col-wrapper -->

                <?php endwhile; ?>
            <?php endif; ?>

            <?php get_footer(); ?>
        """

    '2-Column Template' :
        'prefix' : 'wp-tpl-2-column'
        'body' : """
            <?php

            /**
             * Template Name: 2-Column
             */

            get_header();

            ?>

            <?php if ( have_posts() ) : ?>
                <?php while ( have_posts() ) : the_post(); ?>

                    <div class="wrapper one-col-wrapper">
                        <div class="contain">
                            <div class="row">
                                <main class="col-md-8 col-sm-8">
                                    <article id="page-<?php echo get_the_ID(); ?>" class="content-area entry">
                                        <h1><?php the_title(); ?></h1>
                                        <?php the_content(); ?>
                                    </article><!-- .content-area -->
                                </main>
                                <aside class="col-md-4 col-sm-4">
                                    <?php // get_template_part('partials', 'sidebar'); ?>
                                </aside>
                            </div><!-- .row-->
                        </div><!--.contain -->
                    </div><!-- .wrapper .one-col-wrapper -->

                <?php endwhile; ?>
            <?php endif; ?>

            <?php get_footer(); ?>
        """

    '404 Template' :
        'prefix' : ' wp-tpl-404'
        'body' : """
            <?php

            /**
             * Description for template not found
             */

            get_header();

            ?>

            <div class="wrapperr not-found-wrapper">
                <div class="contain-xs">
                    <div class="row content-area">
                        <div class="col-md-12">
                            <h1 class="title"><?php _e('404 Page Not Found'); ?></h1>
                            <div class="description">
                                <p><?php _e('The page you are looking for does not exist or might have moved. But that’s okay!'); ?></p>
                                <p><?php _e('Please contact us or search the site below to locate the page.'); ?></p>
                            </div>
                        </div>
                        <form class="searchform" action="<?php echo home_url(); ?>" method="GET">
                            <div class="col-md-9">
                                <input type="text" name="s" placeholder="<?php _e('Search site'); ?>">
                            </div>
                            <div class="col-md-3">
                                <input type="submit" value="<?php _e('Search'); ?>">
                            </div>
                        </form>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- .wrapper not-found-wrapper -->

            <?php get_footer(); ?>
        """

    'Application Template' :
        'prefix' : 'wp-tpl-application'
        'body' : """
            <?php

            /**
             * Application attachment template
             */

            get_header();

            $attachment = array(
                'id' => $post->ID,
                'url' => wp_get_attachment_url($post->ID),
                'filename' =>  basename(get_attached_file($post->ID)),
            );

            ?>

            <?php if (have_posts()) : ?>
                <?php while (have_posts()) : the_post(); ?>

                    <div class="wrapper">
                        <div class="contain-xs">
                            <div class="row">
                                <div class="col-md-12">
                                    <main class="content-area entry no-padding">
                                        <article class="col-md-12">
                                            <?php the_content(); ?>
                                            <p><?php _e('If download does not start automatically, click the link below.', 'yourprojectname'); ?></p>
                                            <a id="attachment-download" class="more-link" href="<?php echo $attachment['url']; ?>" download="<?php echo $attachment['filename']; ?>"><?php echo $attachment['filename']; ?> &rarr;</a>
                                        </article>
                                    </main>
                                </div>
                            </div><!-- .row -->
                        </div><!-- .contain -->
                    </div><!-- .wrapper -->

                <?php endwhile; ?>
            <?php endif; ?>

            <?php get_footer(); ?>
        """

    'Filter Template' :
        'prefix' : 'wp-tpl-filter'
        'body' : """
            <?php

            /**
             * Filter Template
             */

            get_header();

            ?>

            <div class="filter-wrapper">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-12">

                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- .filter-wrapper -->

            <?php the_footer(); ?>
        """

    'Page Template' :
        'prefix' : 'wp-tpl-page-template'
        'body' : """
            <?php

            /**
             * Template Name: ${1:Type your template name here...}
             */

            get_header();

            ?>

            <?php while ( have_posts() ) : the_post(); ?>

                ${2:<?php get_template_part( 'partials/${3:hero}' ); ?>}$4

            <?php endwhile; ?>

            <?php get_footer(); ?>
        """

    'Search Template' :
        'prefix' : 'wp-tpl-search'
        'body' : """
            <?php

            /**
             * Search template
             */

            get_header();

            ?>

            <div class="search-wrapper">
                <div class="contain">
                    <div class="row">
                        <div class="col-md-12">
                            <?php if ( have_posts() ) : ?>
                                <h1 class="page-title"><?php printf( __( 'Results for: %s' ), get_search_query() ); ?></h1>

                                <?php while ( have_posts() ) : the_post(); ?>
                                    <div id="<?php echo get_post_type() . '-' . get_the_ID(); ?>" <?php post_class( 'result-item' ); ?>>
                                        <h2 class="result-title">
                                            <?php the_title( sprintf( '<a href="%s" rel="bookmark">', esc_url( get_permalink() ) ), '</a>' ); ?>
                                        </h2>
                                        <div class="result-excerpt">
                                            <?php echo str_truncate( strip_tags( get_the_excerpt() ), 50 ); ?>
                                        </div>
                                    </div>

                                <?php endwhile; ?>

                                <?php

                                the_posts_pagination(array(
                                    'prev_text' => __('Previous page', 'clarity'),
                                    'next_text' => __('Next page', 'clarity'),
                                    'screen_reader_text' => ''
                                ));

                                ?>

                            <?php else : ?>

                                <h1>We're sorry, no results matched your search</h1>

                            <?php endif; ?>
                        </div>
                    </div><!-- .row -->
                </div><!-- .contain -->
            </div><!-- .search-wrapper -->

            <?php get_footer(); ?>
        """

    'Searchform Template' :
        'prefix' : 'wp-tpl-searchform'
        'body' : """
            <?php

            /**
             * Searchform template
             */

            ?>

            <form class="form-area" method="get" action="/">
                <input type="text" id="searchform-input" name="s" value="<?php echo wp_specialchars( $s, 1 ); ?>" placeholder="Search"/>
                <input type="submit" id="searchform-submit"/>
            </form><!-- .form-area -->
        """

    'Single Post Template' :
        'prefix' : 'wp-tpl-single'
        'body' : """
            <?php

            /**
             * Single post template
             */

            get_header();

            ?>

            <?php if (have_posts()) : ?>
                <?php while (have_posts()) : the_post(); ?>

                    <div class="wrapper single-post-wrapper">
                        <div class="contain">
                            <div class="row">
                                <main class="col-md-8 col-sm-8">
                                    <article id="page-<?php echo get_the_ID(); ?>" class="content-area entry">
                                        <h1><?php the_title(); ?></h1>
                                        <?php the_content(); ?>
                                    </article><!-- .content-area -->
                                </main>
                                <aside class="col-md-4 col-sm-4">
                                    <?php // get_template_part('partials', 'sidebar'); ?>
                                </aside>
                            </div><!-- .row-->
                        </div><!--.contain -->
                    </div><!-- .wrapper .single-post-wrapper -->

                <?php endwhile; ?>
            <?php endif; ?>

            <?php get_footer(); ?>
        """

    'Wrapper' :
        'prefix' : 'wrapper'
        'body' : """
            <div class="$1-wrapper wrapper">
                <div class="contain$2">
                    <div class="row">
                        <div class="col-${3:md-12}">
                            $4
                        </div>
                    </div><!-- .row -->
                </div><!-- .contain$2 -->
            </div><!-- .$1-wrapper .wrapper -->
        """

'.source.js': 

    'Background Slideshow' :
        'prefix' : 'bx-background-slideshow'
        'body' : """
            if ($(".${1:background-slideshow} .bxslider li").length > 1) {
                $(".${1:background-slideshow} .bxslider").bxSlider({
                    mode : 'fade',
                    speed : 1000,
                    infiniteLoop : true,
                    controls : false,
                    pager : false,
                    auto: true,
                    autoStart : true,
                    pause : 8000,
                });
            }
        """

    'New BXSlider' :
        'prefix' : 'bx-new'
        'body' : """
            $("${1:.bxslider}").bxSlider({
                minSlides: 2,
                maxSlides: 2,
                slideWidth: 360,
                slideMargin: 10
            });
        """

    'Truncate' :
        'prefix' : 'function-truncate'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Truncate a string based on the given number of max characters.
             * Rounds to the nearest word.
             */
            function truncate(text, maxChars) {
                var words = text.split(" ").splice(0);
                if (text.length > maxChars) {
                    while (text.length > maxChars) {
                        words = words.splice(0, words.length - 1);
                        text = words.join(" ") + " [...]";
                    }
                }
                return text;
            }
        """

    '$(document).ready()...' :
        'prefix' : 'jq-document-ready'
        'voiceCommand' : 'jQuery Document Ready'
        'body' : """
            $(document).ready(function() {
                $1
            });$2
        """

    'centerElement()' :
        'prefix' : 'jq-fn-center-element'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Center an element within the specified parent.
             */
            function centerElement(element, parent) {
                var leftPos = ((parent.width() / 2) - (element.width() / 2)) + "px";
                parent.css({ position : "relative" });
                element.css({
                    left : leftPos,
                    position : "absolute",
                });
            }
        """

    'jQuery.fn.doneTyping()' :
        'prefix' : 'jq-fn-done-typing'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: doneTyping
             * Plugin Version: 1.0.0
             *
             * Run a callback function after a defined time interval. This interval
             * is used to determine rather or not the user appears to be
             * "finished."
             */
            jQuery.fn.doneTyping = function(callback, interval) {

                var timer;

                /**
                 * Start timer as soon as the user appears to be "done."
                 */
                jQuery(this).keyup(function () {
                  clearTimeout(timer);
                  timer = setTimeout(callback, interval);
                });

                /**
                 * Clear the timer once the user begins to type again.
                 */
                jQuery(this).keydown(function () {
                  clearTimeout(timer);
                });
            }
        """

    'Equalize Height' :
        'prefix' : 'jq-fn-equalize-height'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: equalizeHeight
             * Plugin Version: 0.0.2
             *
             * Equalize height of DOM elements
             */
            $.fn.equalizeHeight = function(callback) {
                var tallest = 0;
                var elements = $(this);
                elements.height("");
                $.each(elements, function() {
                    var thisHeight = parseInt($(this).height());
                    if (thisHeight > tallest) {
                        tallest = thisHeight;
                    }
                });
                elements.height(tallest + "px");
                if (typeof callback != "undefined") {
                    callback(tallest);
                }
            }
        """

    'Highlight Menu Items as You Scroll' :
        'prefix' : 'jq-fn-highlight-menu-items-as-you-scroll'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Highlights a given menu item as you scroll.
             */

            // Give each anchor this class
            var anchors = $('.section');

            // The menu items that need to be highlighted as you scroll
            var menuItems = $('.menu ul li');

            menuItems.eq(0).find('a').addClass('active');

            $(window).scroll(function(e) {
                var topMargin = parseFloat($("body").css("margin-top"));
                var currPosition = $(this).scrollTop() + topMargin + 5;
                var anchorsCount = anchors.length;

                $.each(anchors, function(index) {
                    var id = $(this).attr('id');
                    var anchorPos = $(this).offset().top;
                    var nextAnchorPos = (index < (anchorsCount - 1)) ? anchors.eq(index + 1).offset().top : false;

                    if (currPosition >= anchorPos && currPosition <= nextAnchorPos) {
                        if (window.location.hash != "#"+id+"/") {
                            window.location.hash = id+"/";
                        }
                        menuItems.find('a').removeClass('active');
                        menuItems.find("a[href='#" + id + "']").addClass('active');
                    }
                });
            });
        """

    'Lightbox Image Viewer' :
        'prefix' : 'jq-fn-lightbox-image-viewer'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Create a lightbox image viewer similar to the Dixon blog.
             *
             * SNIPPET INCOMPLETE!
             */

            $(".blog-post-wrapper").lightbox();

            jQuery(document).ready(function() {

                $.fn.lightbox = function(imgClass) {

                    var images = $(this).find("img" + imgClass);
                    var imageHolder = $(".the-image");
                    var imageViewer = $(".image-viewer");
                    var imageViewerCover = $(".cover-thingy");

                    /**
                     * Give each img a unique ID attribute.
                     */
                    $.each(images, function(index) {
                        $(this).attr("data-id", index + 1);
                    });

                    images.on("click", function(e) {
                        var imageId = $(this).attr("data-id");
                        var imageUrlLg = $(this).attr("data-size-lg");

                        imageHolder.attr("src", imageUrlLg);
                        toggleImageViewer();

                        nextImage = images.find("[data-id=" + (parseFloat(imageId) + 1) + "]");
                        previousImage = images.find("[data-id=" + (parseFloat($(this).attr("data-id")) - 1) + "]");
                    });

                    /*
                     * Show/hide the image viewer.
                     */
                    function toggleImageViewer() {
                        if (imageViewer.css("display") == "block") {
                            imageViewer.fadeOut();
                            imageViewerCover.fadeOut();
                        } else {
                            imageViewer.fadeIn();
                            imageViewerCover.fadeIn();
                        }
                    }
                }
            });
        """

    'jQuery.fn.parallaxScroll()' :
        'prefix' : 'jq-fn-parallax-scroll'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: parallaxScroll
             * Plugin Version: 0.1.0
             */
            jQuery.fn.parallaxScroll = function(options) {

                var defaults = {
                    startPos : 0,
                    endPos : 0,
                    moveX : 0,
                    moveY : 0,
                    offsetX : 0,
                    offsetY : 0,
                    selector : "",
                };

                var element = this;

                var init = function() {

                    jQuery(element).data('parallaxScroll', this);

                    for (option in defaults) {
                        if (typeof options[option] === 'undefined') {
                            options[option] = defaults[option];
                        }
                    }

                    jQuery(options.selector).css("left", "");

                    reactX(jQuery(this));
                    reactY(jQuery(this));

                    jQuery(this).scroll(function() {
                        reactX(jQuery(this));
                        reactY(jQuery(this));
                    });
                }.bind(this)

                var reactX = function(_this) {
                    var scrollPos = _this.scrollLeft();
                    if (scrollPos >= options.startPos && scrollPos <= options.endPos) {
                        var length =  (options.endPos - options.startPos);
                        var progress = (scrollPos - options.startPos) / length;
                        var pos = Math.round(progress * (options.moveX * 100));
                        jQuery(options.selector).css("left", (pos + options.offsetX) + "px");
                    }
                }

                var reactY = function(_this) {
                    var scrollPos = _this.scrollTop();
                    if (scrollPos >= options.startPos && scrollPos <= options.endPos) {
                        var length =  (options.endPos - options.startPos);
                        var progress = (scrollPos - options.startPos) / length;
                        var pos = Math.round(progress * (options.moveY * 100));
                        jQuery(options.selector).css("top", (pos + options.offsetY) + "px");
                    }
                }

                element.reload = function(options) {
                    init();
                }

                init();

                return this;
            }
        """

    'removeHubspotWrappers()' :
        'prefix' : 'jq-fn-remove-hubspot-wrappers'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Remove annoying HubSpot wrapper code when not possible
             * with no_wrapper=True.
             */
            function removeHubspotWrappers() {
                $(".hs_cos_wrapper").each(function() {
                    if ($(this).children(".hs_cos_wrapper").length == 0) {
                        $(this).closest(":not(.hs_cos_wrapper)").append($(this).html());
                    }
                });
                $(".hs_cos_wrapper").replaceWith("");
            }

            $(document).ready(removeHubspotWrappers);
        """

    'Remove <p> tags from buttons' :
        'prefix' : 'jq-fn-remove-p-tags-from-buttons'
        'body' : """
            /*
             * Author: Santiago Ramirez
             * Remove paragraph tags that contain a button.
             */
            function removePTagsFromButtons() {
                var pTags =  [
                    ".content-area p:has(.btn)",
                    ".content-area p:has(.btn-lg)",
                    ".content-area p:has(.btn-sm)",
                    ".content-area p:has(.btn-xs)",
                ].join(", ");

                $.each($(pTags), function() {
                    $(this).replaceWith($(this).html().replace(/(<p>|<\/p>)/g, ''));
                });
            }

            $(document).ready(removePTagsFromButtons);
        """

    'Scroll to Anchor Links' :
        'prefix' : 'jq-fn-scroll-to-anchor-links'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Creates smooth scrolling anchor links.
             */
            $("a[href*=\\\\"#\\\\"]:not([href=\\\\"#\\\\"])").click(function(e) {
                var href = $(this).attr("href");
                var pattern = new RegExp(/^#([\\\\w\\\\d\\\\-_]+)/);
                var mastheadHeight = ($(".masthead").length && $(".masthead").css("position") == "fixed") ? $(".masthead").outerHeight() : 0;
                var wpadminbarHeight = ($("#wpadminbar").length && $("#wpadminbar").css("position") == "fixed") ? $("#wpadminbar").outerHeight() : 0;
                var offset = mastheadHeight + wpadminbarHeight
                if (pattern.test(href) && $(href).length) {
                    $("html, body").animate({
                        scrollTop: $(href).offset().top - offset
                    }, 1000, "swing");
                    e.preventDefault();
                }
            });
        """

    'Scroll To Top' :
        'prefix' : 'jq-fn-scroll-to-top'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Navigate the user back to the top of the page.
             */
            $(".scroll-to-top").click(function() {
                $("body,html").animate({
                    scrollTop : 0
                }, 1000)
            });
        """

    'When Exists' :
        'prefix' : 'jq-fn-when-exists'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Check every 100 milliseconds rather or not an element exists
             * on the page.
             */
            jQuery.fn.whenExists = function(callback) {

            	var timer = setInterval(checkElementExists, 100);
                var selector = jQuery(this).selector;

            	function checkElementExists() {
            		if (jQuery(selector).length > 0) {
            			clearInterval(timer);
            			callback();
            		}
            	}
            };
        """

    '$("selector").on(function() { ... });' :
        'prefix' : 'jq-on-event'
        'voiceCommand' : 'jQuery On Event'
        'body' : """
            $("${1:selector}").on("${2:event}", function() {
                $4
            });$5
        """

    '$(window).resize(function() { ...' :
        'prefix' : 'jq-window-resize'
        'voiceCommand' : 'jQuery Window Resize'
        'body' : """
            $(window).resize(function() {
                $1
            });$2
        """

    'Blur JS' :
        'prefix' : 'jq-plugin-blurjs'
        'body' : """
            (function(l) {
                l.fn.blurjs = function(e) {
                    function O() {
                        this.a = this.b = this.g = this.r = 0;
                        this.next = null
                    }
                    var y = document.createElement("canvas"),
                        P = !1,
                        H = l(this).selector.replace(/[^a-zA-Z0-9]/g, "");
                    if (y.getContext) {
                        var e = l.extend({
                                source: "body",
                                radius: 5,
                                overlay: "",
                                offset: {
                                    x: 0,
                                    y: 0
                                },
                                optClass: "",
                                cache: !1,
                                cacheKeyPrefix: "blurjs-",
                                draggable: !1,
                                debug: !1
                            }, e),
                            R = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345,
                                328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309,
                                305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259
                            ],
                            S = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20,
                                20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
                            ];
                        return this.each(function() {
                            var A = l(this),
                                I = l(e.source),
                                B = I.css("backgroundImage").replace(/"/g, "").replace(/url\(|\)$/ig, "");
                            ctx = y.getContext("2d");
                            tempImg = new Image;
                            tempImg.onload = function() {
                                if (P) j = tempImg.src;
                                else {
                                    y.style.display = "none";
                                    y.width = tempImg.width;
                                    y.height = tempImg.height;
                                    ctx.drawImage(tempImg, 0, 0);
                                    var j = y.width,
                                        q = y.height,
                                        k = e.radius;
                                    if (!(isNaN(k) || 1 > k)) {
                                        var k =
                                            k | 0,
                                            M = y.getContext("2d"),
                                            l;
                                        try {
                                            try {
                                                l = M.getImageData(0, 0, j, q)
                                            } catch (L) {
                                                try {
                                                    netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead"), l = M.getImageData(0, 0, j, q)
                                                } catch (T) {
                                                    throw alert("Cannot access local image"), Error("unable to access local image data: " + T);
                                                }
                                            }
                                        } catch (U) {
                                            throw alert("Cannot access image"), Error("unable to access image data: " + U);
                                        }
                                        var c = l.data,
                                            u, z, a, d, f, J, g, h, i, v, w, x, m, n, o, r, s, t, C;
                                        u = k + k + 1;
                                        var K = j - 1,
                                            N = q - 1,
                                            p = k + 1,
                                            D = p * (p + 1) / 2,
                                            E = new O,
                                            b = E;
                                        for (a = 1; a < u; a++)
                                            if (b = b.next = new O, a ==
                                                p) var Q = b;
                                        b.next = E;
                                        b = a = null;
                                        J = f = 0;
                                        var F = R[k],
                                            G = S[k];
                                        for (z = 0; z < q; z++) {
                                            m = n = o = g = h = i = 0;
                                            v = p * (r = c[f]);
                                            w = p * (s = c[f + 1]);
                                            x = p * (t = c[f + 2]);
                                            g += D * r;
                                            h += D * s;
                                            i += D * t;
                                            b = E;
                                            for (a = 0; a < p; a++) b.r = r, b.g = s, b.b = t, b = b.next;
                                            for (a = 1; a < p; a++) d = f + ((K < a ? K : a) << 2), g += (b.r = r = c[d]) * (C = p - a), h += (b.g = s = c[d + 1]) * C, i += (b.b = t = c[d + 2]) * C, m += r, n += s, o += t, b = b.next;
                                            a = E;
                                            b = Q;
                                            for (u = 0; u < j; u++) c[f] = g * F >> G, c[f + 1] = h * F >> G, c[f + 2] = i * F >> G, g -= v, h -= w, i -= x, v -= a.r, w -= a.g, x -= a.b, d = J + ((d = u + k + 1) < K ? d : K) << 2, m += a.r = c[d], n += a.g = c[d + 1], o += a.b = c[d + 2], g += m, h += n, i += o, a = a.next,
                                                v += r = b.r, w += s = b.g, x += t = b.b, m -= r, n -= s, o -= t, b = b.next, f += 4;
                                            J += j
                                        }
                                        for (u = 0; u < j; u++) {
                                            n = o = m = h = i = g = 0;
                                            f = u << 2;
                                            v = p * (r = c[f]);
                                            w = p * (s = c[f + 1]);
                                            x = p * (t = c[f + 2]);
                                            g += D * r;
                                            h += D * s;
                                            i += D * t;
                                            b = E;
                                            for (a = 0; a < p; a++) b.r = r, b.g = s, b.b = t, b = b.next;
                                            d = j;
                                            for (a = 1; a <= k; a++) f = d + u << 2, g += (b.r = r = c[f]) * (C = p - a), h += (b.g = s = c[f + 1]) * C, i += (b.b = t = c[f + 2]) * C, m += r, n += s, o += t, b = b.next, a < N && (d += j);
                                            f = u;
                                            a = E;
                                            b = Q;
                                            for (z = 0; z < q; z++) d = f << 2, c[d] = g * F >> G, c[d + 1] = h * F >> G, c[d + 2] = i * F >> G, g -= v, h -= w, i -= x, v -= a.r, w -= a.g, x -= a.b, d = u + ((d = z + p) < N ? d : N) * j << 2, g += m += a.r = c[d], h += n += a.g =
                                                c[d + 1], i += o += a.b = c[d + 2], a = a.next, v += r = b.r, w += s = b.g, x += t = b.b, m -= r, n -= s, o -= t, b = b.next, f += j
                                        }
                                        M.putImageData(l, 0, 0)
                                    }
                                    if (!1 != e.overlay) ctx.beginPath(), ctx.rect(0, 0, tempImg.width, tempImg.width), ctx.fillStyle = e.overlay, ctx.fill();
                                    var j = y.toDataURL();
                                    if (e.cache) try {
                                        e.debug && console.log("Cache Set"), localStorage.setItem(e.cacheKeyPrefix + H + "-" + B + "-data-image", j)
                                    } catch (V) {
                                        console.log(V)
                                    }
                                }
                                q = I.css("backgroundAttachment");
                                k = "fixed" == q ? "" : "-" + (A.offset().left - I.offset().left - e.offset.x) + "px -" + (A.offset().top - I.offset().top -
                                    e.offset.y) + "px";
                                A.css({
                                    "background-image": 'url("' + j + '")',
                                    "background-repeat": I.css("backgroundRepeat"),
                                    "background-position": k,
                                    "background-attachment": q
                                });
                                !1 != e.optClass && A.addClass(e.optClass);
                                e.draggable && (A.css({
                                    "background-attachment": "fixed",
                                    "background-position": "0 0"
                                }), A.draggable())
                            };
                            Storage.prototype.cacheChecksum = function(j) {
                                var q = "",
                                    k;
                                for (k in j) var l = j[k],
                                    q = "[object Object]" == l.toString() ? q + (l.x.toString() + l.y.toString() + ",").replace(/[^a-zA-Z0-9]/g, "") : q + (l + ",").replace(/[^a-zA-Z0-9]/g,
                                        "");
                                this.getItem(e.cacheKeyPrefix + H + "-" + B + "-options-cache") != q && (this.removeItem(e.cacheKeyPrefix + H + "-" + B + "-options-cache"), this.setItem(e.cacheKeyPrefix + H + "-" + B + "-options-cache", q), e.debug && console.log("Settings Changed, Cache Emptied"))
                            };
                            var L = null;
                            e.cache && (localStorage.cacheChecksum(e), L = localStorage.getItem(e.cacheKeyPrefix + H + "-" + B + "-data-image"));
                            null != L ? (e.debug && console.log("Cache Used"), P = !0, tempImg.src = L) : (e.debug && console.log("Source Used"), tempImg.src = B)
                        })
                    }
                }
            })(jQuery);
        """

    'New Blur' :
        'prefix' : 'blur-new'
        'body' : """
            $("#${1:element-id}").blurjs({
                source: "#${1:element-id}",
                radius: ${2:6},
                overlay: "${3:rgba(2555, 255, 255, 0.25)}",
                offset: {
                    x: "center",
                    y: "center"
                }
            });
        """

    'Carousel' :
        'prefix' : 'jq-plugin-carousel-1.0.1'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Version: 1.0.2
             * Fixed increment issue causing the carousel to not display all items.
             * Fixed controls method to hide or show arrows based on the items
             * displayed vs total carousel items.
             * Implemented as jQuery plugin.
             */

            (function($) {

                $.fn.carousel = function(options) {
                    var carousel = new Carousel("#" + $(this).attr("id"));
                    carousel.options = options;
                    carousel.initiate();
                };

                function Carousel(id) {
                    this.carousel = $(id);
                    this.carouselPrev = this.carousel.find(".carousel-prev");
                    this.carouselNext = this.carousel.find(".carousel-next");
                    this.carouselItems = this.carousel.find(".carousel-item");
                    this.carouselContent = this.carousel.find(".carousel-content");
                    this.contentContainerWidth;
                    this.excessContainerWidth = 0;

                    this.incrementBy;
                    this.numberOfIncrements;
                    this.currentIncrement = 0;
                    this.totalCarouselWidth;

                    this.options = {
                        // Sets the content width based on the width of the next/previous buttons
                        // within the carousel container. If set to false, will not do so.
                        "setContentWidth": true,

                        // Hides/displays arrows depending if there is enough content to scroll
                        // the carousel.
                        "controls": true,

                        // Next/previous buttons will move on hover
                        "triggerControlsOnHover" : false,
                    }
                }

                /**
                 * Initiate the carousel and assign event handlers.
                 */
                Carousel.prototype.initiate = function() {
                    if (this.options.setContentWidth == true) {
                        this.setContentWidth();
                    }

                    if (this.options.controls == true) {
                        this.controls();
                    }

                    this.setIncrement();

                    // Assign event handlers for next/previous buttons.
                    this.carouselNext.on("click", function() {
                        this.next();
                    }.bind(this));

                    this.carouselPrev.on("click", function() {
                        this.previous();
                    }.bind(this));

                    console.log(this.options.triggerControlsOnHover);
                    if (this.options.triggerControlsOnHover) {
                        var moveItemsInterval;

                        this.carouselNext.mouseenter(function() {
                            this.next();
                            moveItemsInterval = setInterval(function() {
                                this.next()
                            }.bind(this), 1000);
                        }.bind(this));

                        this.carouselNext.mouseleave(function() {
                            clearInterval(moveItemsInterval);
                        }.bind(this));

                        this.carouselPrev.mouseenter(function() {
                            this.previous();
                            moveItemsInterval = setInterval(function() {
                                this.previous()
                            }.bind(this), 1000);
                        }.bind(this));

                        this.carouselPrev.mouseleave(function() {
                            clearInterval(moveItemsInterval);
                        }.bind(this));
                    }

                    // Re-run initial functions if the user resizes the window.
                    $(window).on("resize", function() {
                        this.resetIncrements();

                        if (this.options.setContentWidth == true) {
                            this.setContentWidth();
                        }

                        if (this.options.controls == true) {
                            this.controls();
                        }

                        this.setIncrement();
                    }.bind(this));

                    this.controls();

                    $(window).resize(function() {
                        this.controls();
                    }.bind(this));
                }

                /**
                 * Return the carousel back to it's initial position.
                 */
                Carousel.prototype.resetIncrements = function() {
                    this.currentIncrement = 0;
                    this.carouselContent.find(".carousel-menu").css("right", "");
                }

                /**
                 * Make the carousel content container an even size with the previous and next
                 * buttons.
                 */
                Carousel.prototype.setContentWidth = function() {
                    this.contentContainerWidth = this.carousel.find(".contain").width();
                    this.carouselContent.css("width", this.contentContainerWidth - (this.carouselPrev.width() + this.carouselNext.width()) - this.excessContainerWidth);
                }

                /**
                 * Determine the amount of increments the carousel can make based on the
                 * width of this.carouselItems
                 */
                Carousel.prototype.setIncrement = function() {
                    this.contentWidth = this.carousel.find(".carousel-content").width();
                    this.carouselItems = this.carousel.find(".carousel-item");
                    this.totalCarouselWidth = this.carouselItems.length * this.carouselItems.width();
                    this.incrementBy = this.carouselItems.eq(0).width();
                    this.numberOfIncrements = this.totalCarouselWidth / this.carouselItems.eq(0).width();

                    this.itemsDisplayed = Math.round(this.contentWidth / this.incrementBy);
                    this.numberOfIncrements = Math.round(this.numberOfIncrements) - this.itemsDisplayed;
                }

                /**
                 * Go to the next increment.
                 */
                Carousel.prototype.next = function(e) {
                    if (this.currentIncrement < this.numberOfIncrements) {
                        this.currentIncrement++;
                        this.carouselContent.find(".carousel-menu").animate({
                            "right": this.incrementBy * this.currentIncrement
                        });
                    }
                }

                /**
                 * Go to the previous increment.
                 */
                Carousel.prototype.previous = function() {
                    if (this.currentIncrement > 0) {
                        this.currentIncrement--;
                        this.carouselContent.find(".carousel-menu").animate({
                            "right": this.incrementBy * this.currentIncrement
                        });
                    }
                }

                /**
                 * Hide or show arrows depedning on if there is enough content for them to
                 * increment by.
                 */
                Carousel.prototype.controls = function() {
                    if (this.carouselItems.length > this.itemsDisplayed) {
                        this.carousel.find(".carousel-prev").show();
                        this.carousel.find(".carousel-next").show();
                    } else {
                        this.carousel.find(".carousel-prev").hide();
                        this.carousel.find(".carousel-next").hide();
                    }
                }

            })(jQuery);
        """

    'New Carousel' :
        'prefix' : 'carousel-new'
        'body' : """
            $("#${1:carousel-id}").carousel({
                // Will hide or show arrows depending on how many carousel items
                // there are.
                hideOrShowArrows : false,

                // Will automatically adjust the carousel content based on the size of
                // the previous/next carousel button.
                setContentWidth : false
            });
        """

    'Drag' :
        'prefix' : 'jq-plugin-drag-1.0.1'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: Drag
             * Plugin Version: 1.0.1
             *
             * Easily make an element draggable.
             *
             * Add option 'touchEnabled' to enable touch events.
             */
            $.fn.drag = function(options) {

                var selector = $(this).selector;
                var defaults = {
                    dragX: true, // If set to true, element can be dragged up and down
                    dragY: true, // If set to true, element can be dragged sideways
                    parent: $("body"), // Restrict dragging within parent
                    touchEnabled: false, // Allow element to be draggable on touch screens
                    onDrag: false, // Callback which fires when element is dragged
                };

                // Merge defaults with user-defined options
                for (var option in defaults) {
                    options[option] = (typeof options[option] !== "undefined") ? options[option] : defaults[option];
                }

                var mouseupEvent = "mouseup";
                var mousemoveEvent = "mousemove";
                var mousedownEvent = "mousedown";

                if (options.touchEnabled) {
                    mouseupEvent += " touchend";
                    mousemoveEvent += " touchmove";
                    mousedownEvent += " touchstart";
                }

                /**
                 * Return the current mouse position or touch position.
                 */
                function getPos(e) {
                    var pos = {
                        x: 0,
                        y: 0
                    };
                    if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {
                        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                        pos.x = touch.pageX;
                        pos.y = touch.pageY;
                    } else if (e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {
                        pos.x = e.pageX;
                        pos.y = e.pageY;
                    }
                    return pos;
                }

                /**
                 * Element was clicked and may be dragged
                 */
                function handleMousedown(e) {
                    var pos = getPos(e);
                    var mousedownX = pos.x;
                    var mousedownY = pos.y;
                    var dragItemOffsetLeft = $(selector).offset().left;
                    var dragItemOffsetTop = $(selector).offset().top;

                    /**
                     * Element was clicked and is being dragged
                     */
                    function handleMousemove(e) {
                        var pos = getPos(e);
                        var mousemoveX = pos.x;
                        var mousemoveY = pos.y;
                        var xPos = dragItemOffsetLeft + (mousemoveX - mousedownX);
                        var yPos = dragItemOffsetTop + (mousemoveY - mousedownY);
                        var parent = options.parent;
                        var parentOffsetTop = parent.offset().top;
                        var parentOffsetBottom = parentOffsetTop + parent.height() - $(selector).height();
                        var parentOffsetLeft = parent.offset().left;
                        var parentOffsetRight = parentOffsetLeft + parent.width() - $(selector).width();

                        // Move x-axis if dragX is true
                        if (options.dragX) {
                            if (parentOffsetLeft > xPos) {
                                xPos = parentOffsetLeft;
                            } else if (parentOffsetRight < xPos) {
                                xPos = parentOffsetRight;
                            }
                            $(selector).offset({
                                left: xPos
                            });
                        }

                        // Move y-axis if dragY is true
                        if (options.dragY) {
                            if (parentOffsetTop > yPos) {
                                yPos = parentOffsetTop;
                            } else if (parentOffsetBottom < yPos) {
                                yPos = parentOffsetBottom;
                            }
                            $(selector).offset({
                                top: yPos
                            });
                        }

                        // onDrag callback,
                        if (options.onDrag) {
                            options.onDrag({
                                x: xPos - parentOffsetLeft,
                                y: yPos - parentOffsetTop
                            });
                        }

                        e.preventDefault();
                    }

                    /**
                     * Stop dragging element
                     */
                    function handleMouseup(e) {
                        $("body").off(mouseupEvent, handleMouseup)
                        $("body").off(mousemoveEvent, handleMousemove);
                    }

                    $("body").on(mouseupEvent, handleMouseup)
                    $("body").on(mousemoveEvent, handleMousemove);

                    e.preventDefault();
                }

                $(selector).on(mousedownEvent, handleMousedown);
            }
        """

    'Filter WP Posts' :
        'prefix' : 'jq-plugin-filter-wp-posts-1.1.0'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: FilterWPPosts
             * Plugin Version: 1.1.0
             *
             * Replace data-ref with data-filter.
             * Remove prepended filter--control class.
             * Replace prepended filter--group class with filter-by-
             * Update the way filter data is stored.
             * Fix load more bug.
             */

            var $ = jQuery.noConflict();

            $.fn.filterWPPosts = function(options) {

                // Save predefined data to be referenced when the filter is cleared.
                var predefinedData = (typeof options.data !== 'undefined') ? options.data : {};

                // Set predefined data
                var requestData = (typeof predefinedData !== 'undefined') ? $.extend({}, predefinedData) : false;

                // Define callbacks
                var beforeCallback = (options.before) ? options.before : false;
                var prepareCallback = (options.prepare) ? options.prepare : false;
                var afterCallback = (options.after) ? options.after : false;
                var errorCallback = (options.error) ? options.error : false;

                var id = $(this).attr("id");
                var loadMore = false;
                var endpoint = (options.endpoint) ? options.endpoint : "/posts";

                var pagination = {};

                var strings = {
                    next: "Next",
                    previous: "Previous"
                };

                var _thisSelector = "#" + id + " ";

                var selectorLoadMore =
                    _thisSelector + ".load-more";
                    //".load-more[data-filter=" + id + "]";

                var selectorTemplate =
                    _thisSelector + ".template, " +
                    ".template[data-filter=" + id + "]";

                if (options.strings) {
                    for (var string in strings) {
                        if (options.strings[string]) {
                            strings[string] = options.strings[string];
                        }
                    }
                }

                var template = $(selectorTemplate).eq(0);
                var templateHTML = (template) ? template.html() : null;

                if (templateHTML) {
                    template.html("");
                }

                // Send an request initial request on load.
                sendRequest();

                /**
                 * Author: Santiago Ramirez
                 * Input or remove data from the requestData variable.
                 */
                function handleSelectedItem(selected, dataType, dataProp) {
                    var tag = selected.prop("tagName");
                    var dataType = (typeof dataType !== undefined) ? dataType : false;
                    var dataProp = (typeof dataProp !== undefined) ? dataProp : false;

                    if (tag == "SELECT") {
                        var filter = selected;
                        var value = (selected.val()) ? selected.val() : false;

                        if (value != false) {
                            filter.addClass("selected");
                        } else {
                            filter.removeClass("selected");
                        }
                    } else {
                        var filter = selected.closest("[class^='filter-by-'], [class*=' filter-by-']");
                        var value = (selected.attr("data-value")) ? selected.attr("data-value") : false;
                        var isSelected = selected.hasClass("selected");
                        var disableToggle = selected.hasClass("disable-toggle");

                        if (isSelected && disableToggle) {
                            return;
                        }
                    }

                    if (dataType && dataProp) {
                        if (!requestData[dataType]) {
                            requestData[dataType] = {};
                        }
                        var data = (requestData[dataType][dataProp]) ? requestData[dataType][dataProp] : false;
                    } else if (dataType) {
                        var data = (requestData[dataType]) ? requestData[dataType] : false;
                    }

                    if (filter.hasClass("select-multiple") && selected.prop("tagName") !== "SELECT") {
                        if (!data) {
                            data = [];
                        }
                        if (selected.hasClass("selected")) {
                            for (var i = 0; i < data.length; i++) {
                                if (data[i] == value) {
                                    data.splice(i, 1);
                                    selected.removeClass("selected");

                                    if (data.length == 0) {
                                        data = false;
                                    }
                                    break;
                                }
                            }
                        } else {
                            data.push(value);
                            selected.addClass("selected");
                        }
                    } else {
                        filter.find(".option").removeClass("selected");
                        if (isSelected && !isNoUpdate && tag != "SELECT") {
                            data = false;
                        } else {
                            data = value;
                            selected.addClass("selected");
                        }
                    }

                    if (dataType && dataProp) {
                        requestData[dataType][dataProp] = data;
                    } else if (dataType) {
                        requestData[dataType] = data;
                    }
                }

                /**
                 * Author: Santiago Ramirez
                 * Filter data by WordPress arguments.
                 */
                function filterByArgument() {
                    var tag = $(this).prop("tagName");
                    if (tag == "SELECT") {
                        var argument = ($(this).attr("data-argument")) ? $(this).attr("data-argument") : false;
                    } else {
                        var filter = $(this).closest(".filter-by-argument");
                        var argument = (filter.attr("data-argument")) ? filter.attr("data-argument") : false;
                    }
                    handleSelectedItem($(this), "filter", argument);
                    resetPagination();
                    sendRequest();
                }

                $(_thisSelector + " ul.filter-by-argument .option").click(filterByArgument);
                $(_thisSelector + " select.filter-by-argument").change(filterByArgument);

                /**
                 * Author: Santiago Ramirez
                 * Filter data by categories.
                 */
                function filterByCategory() {
                    handleSelectedItem($(this), "categories");
                    resetPagination();
                    sendRequest();
                }

                $("#" + id + " ul.filter-by-category .option").click(filterByCategory);
                $("#" + id + " select.filter-by-category").change(filterByCategory);

                /**
                 * Author: Santiago Ramirez
                 * Filter data by a date range.
                 */
                function filterByDateRange() {
                    var tag = $(this).prop("tagName");
                    if (tag == "SELECT") {
                        var value = ($(this).val()) ? $(this).val() : false;
                        var filter = $(this);

                        if (value != false) {
                            filter.addClass("selected");
                        } else {
                            filter.removeClass("selected");
                        }
                    } else {
                        var value = ($(this).attr("data-value")) ? $(this).attr("data-value") : false;
                    }

                    if (value) {
                        var before = value.split("-")[1];
                        var after = value.split("-")[0];
                        if (before && after) {
                            requestData.dateRange = ("filter[date_query][before]=" + before + "&filter[date_query][after]=" + after);
                        }
                    } else {
                        requestData.dateRange = false;
                    }

                    resetPagination();
                    sendRequest();
                }

                $("#" + id + " ul.filter-by-date-range .option").click(filterByDateRange);
                $("#" + id + " select.filter-by-date-range").change(filterByDateRange);

                /**
                 * Author: Santiago Ramirez
                 * Filter data by custom taxonomies.
                 */
                function filterByTaxonomy() {
                    var tag = $(this).prop("tagName");
                    if (tag == "SELECT") {
                        var taxonomy = ($(this).attr("data-taxonomy")) ? $(this).attr("data-taxonomy") : false;
                    } else {
                        var filter = $(this).closest(".filter-by-taxonomy");
                        var taxonomy = filter.attr("data-taxonomy");
                    }

                    handleSelectedItem($(this), "taxonomies", taxonomy);
                    resetPagination();
                    sendRequest();
                }

                $(_thisSelector + "ul.filter-by-taxonomy .option").click(filterByTaxonomy);
                $(_thisSelector + "select.filter-by-taxonomy").change(filterByTaxonomy);

                /**
                 * Author: Santiago Ramirez
                 * Reset the entire filter to its defaults.
                 */
                function clearAll() {
                    requestData = (predefinedData) ? $.extend({}, predefinedData) : false;
                    $(this).find(".option").removeClass("selected");
                    $(this).find("select").val("");
                    $(this).find("select").removeClass("selected");
                    resetPagination();
                    sendRequest();
                }

                $(this).find(".clear-all").on("click", clearAll);

                /**
                 *
                 */
                function getPaged() {
                    if (typeof requestData.filter !== 'undefined' && typeof requestData.filter.paged !== 'undefined') {
                        return parseFloat(requestData.filter.paged);
                    } else if (typeof requestData.page !== 'undefined') {
                        return parseFloat(requestData.page);
                    } else {
                        return false;
                    }
                }

                /**
                 *
                 */
                function setPaged(paged) {
                    if (typeof requestData.filter !== 'undefined' && typeof requestData.filter.paged !== 'undefined') {
                        requestData.filter.paged = paged;
                    } else if (typeof requestData.page !== 'undefined') {
                        requestData.page = paged;
                    }
                }

                /**
                 * Author: Santiago Ramirez
                 * Create the pagination.
                 */
                function setPagination() {
                    var paged = getPaged();
                    var totalPages = pagination.totalPages;
                    var pageNumbersOnEitherSide = 2;
                    var maxPagesToShow = (pageNumbersOnEitherSide * 2) + 1;
                    var firstPageToShow = 1;
                    var lastPageToShow = maxPagesToShow;
                    var containerInsideFilter = $(this).find("ul.pagination");
                    var containerOutsideFilter = $("ul.pagination[data-filter=" + id + "]");

                    if ((totalPages > maxPagesToShow) && (paged > pageNumbersOnEitherSide)) {
                        var firstPageToShow = paged - pageNumbersOnEitherSide;
                        if ((paged + pageNumbersOnEitherSide) <= totalPages) {
                            var lastPageToShow = paged + pageNumbersOnEitherSide;
                        } else {
                            var lastPageToShow = paged;
                        }
                    }

                    // The user is on a page that is close to maximum number of pages so
                    // The first page to show should be the maximum number of pages minus
                    // the maximum number of pages to show.
                    if (paged >= (totalPages - pageNumbersOnEitherSide)) {
                        firstPageToShow = (totalPages - maxPagesToShow) + 1;
                        lastPageToShow = totalPages;
                    }

                    // There aren't enough posts for the previous/next functionality.
                    if (totalPages <= maxPagesToShow) {
                        firstPageToShow = 1;
                        lastPageToShow = totalPages;
                    }

                    // Empty out the pagination to issert the new pagination.
                    containerInsideFilter.html("");
                    containerOutsideFilter.html("");

                    // Hide pagination if there is only 1 page.
                    if (totalPages == 1) {
                        containerInsideFilter.hide();
                        containerOutsideFilter.hide();
                    } else {
                        containerInsideFilter.show();
                        containerOutsideFilter.show();
                    }

                    // Create pagination elements
                    if (containerInsideFilter || containerOutsideFilter) {
                        if (paged > 1) {
                            containerInsideFilter.append('<li class="previous">' + strings.previous + '</li>');
                            containerOutsideFilter.append('<li class="previous">' + strings.previous + '</li>');
                        }
                        if (firstPageToShow > 1) {
                            containerInsideFilter.append('<li class="dots dots-previous">...</li>');
                            containerOutsideFilter.append('<li class="dots dots-previous">...</li>');
                        }

                        for (var i = firstPageToShow; i <= lastPageToShow; i++) {
                            containerInsideFilter.append('<li class="go-to-page" data-value="' + i + '">' + i + '</li>');
                            containerOutsideFilter.append('<li class="go-to-page" data-value="' + i + '">' + i + '</li>');
                        }

                        if ((totalPages > maxPagesToShow) && paged < (totalPages - pageNumbersOnEitherSide)) {
                            containerInsideFilter.append('<li class="dots dots-next">...</li>');
                            containerOutsideFilter.append('<li class="dots dots-next">...</li>');
                        }

                        if (paged < totalPages) {
                            containerInsideFilter.append('<li class="next">' + strings.next + '</li>');
                            containerOutsideFilter.append('<li class="next">' + strings.next + '</li>');
                        }
                    }

                    // Apply pagination event handlers.
                    containerInsideFilter.find("li.next").click(next);
                    containerOutsideFilter.find("li.next").click(next);
                    containerInsideFilter.find("li.previous").click(previous);
                    containerOutsideFilter.find("li.previous").click(previous);
                    containerInsideFilter.find("li.go-to-page").click(goToPage);
                    containerOutsideFilter.find("li.go-to-page").click(goToPage);

                    // Select the current page.
                    containerInsideFilter.find("li.go-to-page").removeClass("selected");
                    containerOutsideFilter.find("li.go-to-page").removeClass("selected");
                    containerInsideFilter.find("li.go-to-page[data-value=" + paged + "]").addClass("selected");
                    containerOutsideFilter.find("li.go-to-page[data-value=" + paged + "]").addClass("selected");
                }

                /**
                 * Author: Santiago Ramirez
                 * Reset the pagination when a user performs a new filter
                 */
                function resetPagination() {
                    setPaged("1");
                    var containerInsideFilter = $(this).find("ul.pagination");
                    var containerOutsideFilter = $("ul.pagination[data-filter=" + id + "]");
                    containerInsideFilter.html("");
                    containerInsideFilter.html("");
                }

                /**
                 * Author: Santiago Ramirez
                 * Go to next page
                 */
                function next() {
                    var paged = getPaged();
                    if (paged && pagination.totalPages) {
                        if (paged != pagination.totalPages) {
                            setPaged((parseFloat(paged) + 1) + "");
                            sendRequest();
                        }
                    }
                }

                /**
                 * Author: Santiago Ramirez
                 * Go to previous page.
                 */
                function previous() {
                    var paged = getPaged();
                    if (paged && paged != "1") {
                        setPaged((parseFloat(paged) - 1) + "");
                        sendRequest();
                    }
                }

                /**
                 * Author: Santiago Ramirez
                 * Go to a specific page.
                 */
                function goToPage() {
                    var paged = parseFloat($(this).attr("data-value"));
                    if (requestData.filter.posts_per_page && requestData.filter.paged) {
                        if (paged >= 1 && paged <= pagination.totalPages) {
                            requestData.filter.paged = paged + "";
                            sendRequest();
                        }
                    }
                }

                /**
                 * Author: Santiago Ramirez
                 * Append more posts to template.
                 */
                function loadMoreResults() {
                    loadMore = true;
                    next();
                }

                $(selectorLoadMore).click(loadMoreResults);

                /**
                 *
                 */
                function urlencodeRequestDataObject(key) {
                    var url = "";

                    if (key === "filter" || key === "taxonomies") {
                        var before = "filter[";
                        var after = "]=";
                    } else {
                        var before = "";
                        var after = "="
                    }

                    for (var subkey in requestData[key]) {
                        url += before + subkey + after;
                        if (requestData[key][subkey].constructor === Array) {
                            for (var i = 0; i < requestData[key][subkey].length; i++) {
                                url += requestData[key][subkey][i] + ",";
                            }
                            url = url.slice(0, -1);
                        } else {
                            url += requestData[key][subkey];
                        }
                        url += "&";
                    }

                    return url;
                }

                /**
                 *
                 */
                function urlencodeRequestDataArray(key) {
                    var url = key + "=";
                    for (var i = 0; i < requestData[key].length; i++) {
                        url += requestData[key][i] + ",";
                    }
                    return url.slice(0, -1) + "&";
                }

                /**
                 *
                 */
                function getRequestURL() {
                    var url = "/wp-json/wp/v2" + endpoint + "?";

                    for (var key in requestData) {
                        if (requestData[key].constructor === Object) {
                            url += urlencodeRequestDataObject(key);
                        } else if (requestData[key].constructor == Array) {
                            url += urlencodeRequestDataArray(key);
                        } else if (requestData[key] !== false) {
                            url += key + "=" + requestData[key] + "&";
                        }
                    }

                    // If there is a trailing "&" symbol, remove it.
                    if (url.substr(url.length - 1) == "&") {
                        url = url.slice(0, -1);
                    }

                    return url;
                }

                /**
                 * Author: Santiago Ramirez
                 * Create the request URL based on our collected request data and send
                 * to the server. On success, update the Mustache template.
                 */
                function sendRequest() {
                    var url = getRequestURL();

                    if (beforeCallback) {
                        beforeCallback();
                    }

                    $.ajax({
                        url: url,
                        dataType: "json",
                        success: function(data, textStatus, request) {
                            if (prepareCallback) {
                                preparedData = prepareCallback(data);
                                if (preparedData) {
                                    data = preparedData;
                                }
                            }

                            var rendered = Mustache.render(templateHTML, {
                                data: data
                            });

                            template.hide();

                            if (loadMore == true) {
                                template.append(rendered);
                            } else {
                                template.html(rendered);
                            }

                            template.show();

                            var paged = getPaged();

                            if (paged) {
                                setPagination();

                                pagination.totalResults = request.getResponseHeader("X-WP-Total");
                                pagination.totalPages = request.getResponseHeader("X-WP-TotalPages");

                                if (paged < pagination.totalPages) {
                                    $(selectorLoadMore).addClass("has-more");
                                } else {
                                    $(selectorLoadMore).removeClass("has-more");
                                }
                            }

                            // Reset load more
                            loadMore = false;

                            if (afterCallback) {
                                afterCallback();
                            }
                        },
                        error: function(error) {
                            if (errorCallback) {
                                errorCallback(error);
                            }
                        }
                    });
                }
            };
        """

    'New Filter WP Posts' :
        'prefix' : 'fwpp-new'
        'body' : """
            $("#${1:filter-id}").filterWPPosts({
                // The REST API resource to be accessed.
                endpoint: "/${2:posts}",

                // Specify WordPress arguments.
                args : {
                },

                // Run custom code before the filter updates.
                before : function() {
                },

                // Run custom code after the filter updates.
                after : function(data) {
                },

                // An error occured making the request.
                error : function() {

                }
            });
        """

    'Form Validation' :
        'prefix' : 'jq-plugin-form-validation'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: FormValidate
             * Plugin Version: 1.0.0
             *
             * jQuery plugin for basic form validation.
             */
            $.fn.formValidate = function(callback) {
                $(this).submit(function(e){
                    e.preventDefault(e);

                    var form = $(this);
                    var inputs = form.find("input, select, textarea");
                    var errors = new Array();

                    // Loop through each input and validate based on the attributes
                    // assigned to it.
                    $.each(inputs, function(i) {
                        var input = $(inputs[i]);
                        var inputName = (typeof input.attr("name") != "undefined" && input.attr("name") != false) ? input.attr("name") : false;
                        var inputValue = (input.val() == null || input.val().length == 0) ? null : input.val();
                        var inputRequired = (typeof input.attr("required") != "undefined" && input.attr("required") != false) ? true : false;

                        // Validate required inputs.
                        if (inputRequired && inputValue == null) {
                            errors.push(inputName + "_required")
                        }
                    });

                    // If there are no errors, pass on AJAX ready form data to
                    // the callback. Otherwise, return errors to the callback.
                    if (errors.length == 0) {
                        var data = new Object();
                        var fields = form.serializeArray();

                        // Extract submitted form data.
                        $.each(fields, function(i) {
                            data[fields[i]["name"]] = fields[i]["value"];
                        });

                        callback([], data);
                    } else {
                        callback(errors, {});
                    }
                });
            };
        """

    'New Form Validation' :
        'prefix' : 'fv-new'
        'body' : """
            $("#${1:form-id}").formValidate(function(errors, data)) {
                if (errors.length) {
                    console.log(errors);
                    return;
                }

                $.ajax({
                    url: "${2:/path/to/somewhere}",
                    method: "${3:post}",
                    dataType: "${4:json}",
                    data: data,
                    success: function(data) {
                        ${5:/* Do stuff here... */}
                    }
                })
            }
        """

    'Masonry' :
        'prefix' : 'jq-plugin-masonry-4.1.1'
        'body' : """
            /*!
             * Masonry v4.1.1
             * Cascading grid layout library
             * http://masonry.desandro.com
             * MIT License
             * by David DeSandro
             */

            ( function( window, factory ) {
              // universal module definition
              /* jshint strict: false */ /*globals define, module, require */
              if ( typeof define == 'function' && define.amd ) {
                // AMD
                define( [
                    'outlayer/outlayer',
                    'get-size/get-size'
                  ],
                  factory );
              } else if ( typeof module == 'object' && module.exports ) {
                // CommonJS
                module.exports = factory(
                  require('outlayer'),
                  require('get-size')
                );
              } else {
                // browser global
                window.Masonry = factory(
                  window.Outlayer,
                  window.getSize
                );
              }

            }( window, function factory( Outlayer, getSize ) {

            'use strict';

            // -------------------------- masonryDefinition -------------------------- //

              // create an Outlayer layout class
              var Masonry = Outlayer.create('masonry');
              // isFitWidth -> fitWidth
              Masonry.compatOptions.fitWidth = 'isFitWidth';

              Masonry.prototype._resetLayout = function() {
                this.getSize();
                this._getMeasurement( 'columnWidth', 'outerWidth' );
                this._getMeasurement( 'gutter', 'outerWidth' );
                this.measureColumns();

                // reset column Y
                this.colYs = [];
                for ( var i=0; i < this.cols; i++ ) {
                  this.colYs.push( 0 );
                }

                this.maxY = 0;
              };

              Masonry.prototype.measureColumns = function() {
                this.getContainerWidth();
                // if columnWidth is 0, default to outerWidth of first item
                if ( !this.columnWidth ) {
                  var firstItem = this.items[0];
                  var firstItemElem = firstItem && firstItem.element;
                  // columnWidth fall back to item of first element
                  this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||
                    // if first elem has no width, default to size of container
                    this.containerWidth;
                }

                var columnWidth = this.columnWidth += this.gutter;

                // calculate columns
                var containerWidth = this.containerWidth + this.gutter;
                var cols = containerWidth / columnWidth;
                // fix rounding errors, typically with gutters
                var excess = columnWidth - containerWidth % columnWidth;
                // if overshoot is less than a pixel, round up, otherwise floor it
                var mathMethod = excess && excess < 1 ? 'round' : 'floor';
                cols = Math[ mathMethod ]( cols );
                this.cols = Math.max( cols, 1 );
              };

              Masonry.prototype.getContainerWidth = function() {
                // container is parent if fit width
                var isFitWidth = this._getOption('fitWidth');
                var container = isFitWidth ? this.element.parentNode : this.element;
                // check that this.size and size are there
                // IE8 triggers resize on body size change, so they might not be
                var size = getSize( container );
                this.containerWidth = size && size.innerWidth;
              };

              Masonry.prototype._getItemLayoutPosition = function( item ) {
                item.getSize();
                // how many columns does this brick span
                var remainder = item.size.outerWidth % this.columnWidth;
                var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
                // round if off by 1 pixel, otherwise use ceil
                var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );
                colSpan = Math.min( colSpan, this.cols );

                var colGroup = this._getColGroup( colSpan );
                // get the minimum Y value from the columns
                var minimumY = Math.min.apply( Math, colGroup );
                var shortColIndex = colGroup.indexOf( minimumY );

                // position the brick
                var position = {
                  x: this.columnWidth * shortColIndex,
                  y: minimumY
                };

                // apply setHeight to necessary columns
                var setHeight = minimumY + item.size.outerHeight;
                var setSpan = this.cols + 1 - colGroup.length;
                for ( var i = 0; i < setSpan; i++ ) {
                  this.colYs[ shortColIndex + i ] = setHeight;
                }

                return position;
              };

              /**
               * @param {Number} colSpan - number of columns the element spans
               * @returns {Array} colGroup
               */
              Masonry.prototype._getColGroup = function( colSpan ) {
                if ( colSpan < 2 ) {
                  // if brick spans only one column, use all the column Ys
                  return this.colYs;
                }

                var colGroup = [];
                // how many different places could this brick fit horizontally
                var groupCount = this.cols + 1 - colSpan;
                // for each group potential horizontal position
                for ( var i = 0; i < groupCount; i++ ) {
                  // make an array of colY values for that one group
                  var groupColYs = this.colYs.slice( i, i + colSpan );
                  // and get the max value of the array
                  colGroup[i] = Math.max.apply( Math, groupColYs );
                }
                return colGroup;
              };

              Masonry.prototype._manageStamp = function( stamp ) {
                var stampSize = getSize( stamp );
                var offset = this._getElementOffset( stamp );
                // get the columns that this stamp affects
                var isOriginLeft = this._getOption('originLeft');
                var firstX = isOriginLeft ? offset.left : offset.right;
                var lastX = firstX + stampSize.outerWidth;
                var firstCol = Math.floor( firstX / this.columnWidth );
                firstCol = Math.max( 0, firstCol );
                var lastCol = Math.floor( lastX / this.columnWidth );
                // lastCol should not go over if multiple of columnWidth #425
                lastCol -= lastX % this.columnWidth ? 0 : 1;
                lastCol = Math.min( this.cols - 1, lastCol );
                // set colYs to bottom of the stamp

                var isOriginTop = this._getOption('originTop');
                var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +
                  stampSize.outerHeight;
                for ( var i = firstCol; i <= lastCol; i++ ) {
                  this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );
                }
              };

              Masonry.prototype._getContainerSize = function() {
                this.maxY = Math.max.apply( Math, this.colYs );
                var size = {
                  height: this.maxY
                };

                if ( this._getOption('fitWidth') ) {
                  size.width = this._getContainerFitWidth();
                }

                return size;
              };

              Masonry.prototype._getContainerFitWidth = function() {
                var unusedCols = 0;
                // count unused columns
                var i = this.cols;
                while ( --i ) {
                  if ( this.colYs[i] !== 0 ) {
                    break;
                  }
                  unusedCols++;
                }
                // fit container to columns that have been used
                return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;
              };

              Masonry.prototype.needsResizeLayout = function() {
                var previousWidth = this.containerWidth;
                this.getContainerWidth();
                return previousWidth != this.containerWidth;
              };

              return Masonry;

            }));
        """

    'Parallax Hover' :
        'prefix' : 'jq-plugin-parallax-hover-1.0.0'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Plugin Name: Parallax Hover
             * Plugin Version: 1.0.0
             *
             * Create a parallax effect for elements contained within a viewport
             */
            $.fn.parallaxHover = function(elements) {

                /**
                 * Add mousemove event for each element
                 */
                $(this).mousemove(function(e) {
                    for (var i = 0; i < elements.length; i++) {
                        var element = elements[i];
                        react(e, $(this), element);
                    }
                });

                /**
                 * Move element based on the cursor position relative to
                 * the viewport
                 */
                function react(e, viewport, element) {
                    var width = viewport.width();
                    var height = viewport.height();
                    var moveX = (typeof element.moveX !== 'undefined') ? element.moveX : 0;
                    var moveY = (typeof element.moveY !== 'undefined') ? element.moveY : 0;
                    var mouseX = e.pageX - viewport.offset().left;
                    var mouseY = e.pageY - viewport.offset().top;
                    var percentX = (mouseX / width);
                    var percentY = (mouseY / height);
                    var offsetX = (moveX / 2) - (moveX * percentX);
                    var offsetY = (moveY / 2) - (moveY * percentY);
                    var element = element.element;

                    element.css("margin-left", + offsetX + "px");
                    element.css("margin-top", + offsetY + "px");
                }
            }
        """

    'New Sticky' :
        'prefix' : 'new-sticky'
        'body' : """
            $("${1:selector}").sticky({
                type: "${2:type}", // header or sticky
                sensitivity: ${3:2}, // How quickly should this sticky respond?
                scrollDown: function() {
                    // Do something when the user is scrolling down.
                },
                scrollUp: function() {
                    // Do something when the user is scrolling up.
                }
            });
        """

    'Sticky' :
        'prefix' : 'jq-plugin-sticky'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Version: 1.0.0
             */

            /**
             * Create a new sticky element with the given options.
             */
            jQuery.fn.sticky = function(options) {
                options.sticky = this;
                var sticky = new Sticky(options);
            };

            function Sticky(options) {
                this.defaultOptions = {
                    sensitivity : 0,
                    bufferRoom : 0,
                };

                // Set options to the defaults if not defined.
                for (var key in this.defaultOptions) {
                    if (!options[key]) {
                        options[key] = this.defaultOptions[key];
                    }
                }

                this.uId = Math.random().toString(36).substr(2, 5);
                this.currentPos = jQuery(window).scrollTop();
                this.previousPos = 0;
                this.pixelsScrolled = 0;
                this.isAboveBarrier;
                this.isScrollingDown = false;
                this.isHidden = (options.sticky.css("display") == "none") ? true : false;
                this.stickyInitialHeight = (this.isHidden) ? null : options.sticky.outerHeight();
                this.options = options;

                // Determine the type of sticky element this is.
                switch (this.options.type) {
                    case "header" :
                        this.header();
                        break;
                    case "sidebar" :
                        this.sidebar();
                        break;
                    default :
                        return;
                }
            }

            /**
             * Author: Santiago Ramirez
             * Create a sticky header.
             */
            Sticky.prototype.header = function() {

                // Apply initial styles. If there is more than one sticky header
                // (ex. desktop and mobile), then the data-active-sticky-header attribute
                // tells the second sticky to not override the first one.
                if (jQuery("body").attr("data-active-sticky-header") == undefined && this.options.sticky.css("display") != "none") {
                    jQuery("body").attr("data-active-sticky-header", this.uId);
                    jQuery("body").css("margin-top", this.options.sticky.outerHeight());
                }

                this.options.sticky.css({
                    "position": "fixed",
                    "top": 0, "left": 0, "right": 0,
                });

                jQuery(window).on("resize", function() {
                    // Since the inital sticky height may not be the same as the new
                    // resolution, we'll set this to null.
                    this.stickyInitialHeight = null;

                    // When a user resizes the screen, we want to check if the sticky
                    // header is still displayed or not. If not, then we should reset the
                    // body top margin.
                    if (this.options.sticky.css("display") == "none") {
                        this.isHidden = true;

                        // Test is the current sticky header is the active sticky header.
                        // If so, then reset the body top margin.
                        if (jQuery("body").attr("data-active-sticky-header") == this.uId) {
                            jQuery("body").css("margin-top", "0px");
                        }
                    } else {
                        this.isHidden = false;
                        jQuery("body").attr("data-active-sticky-header", this.uId);
                        jQuery("body").css("margin-top", this.options.sticky.outerHeight() + "px");
                    }
                }.bind(this));

                jQuery(window).on("scroll", function() {
                    // If the sticky header is not displayed, do not run any code.
                    if (this.options.sticky.css("display") == "none") {
                        this.isHidden = true;
                        return;
                    } else {
                        this.isHidden = false;
                    }

                    // Get the current position.
                    this.currentPos = jQuery(window).scrollTop();

                    // When a user scrolls near the top of the screen, we want to reset the
                    // sticky header/body top margin back to its defaults.
                    if (this.currentPos <= 25) {
                        if (this.isAboveBarrier == false) {
                            this.isAboveBarrier = true;
                            this.options.scrollUp();

                            if (this.stickyInitialHeight !== null) {
                                jQuery("body").css("margin-top", this.stickyInitialHeight);
                            } else {
                                jQuery("body").css("margin-top", this.options.sticky.outerHeight());
                            }
                        }
                        return;
                    } else {
                        this.isAboveBarrier = false;
                    }

                    // The user is scrolling down!
                    if (this.previousPos <= this.currentPos && this.isScrollingDown == false) {
                        this.pixelsScrolled++;
                        if (this.pixelsScrolled > (this.options.sensitivity * 5)) {
                            this.isScrollingDown = true;
                            // Run scrollDown callback if there is one.
                            if (typeof this.options.scrollDown !== undefined) {
                                this.options.scrollDown();
                                this.options.sticky.addClass("scrolling-down");
                            }
                            this.pixelsScrolled = 0;
                        }

                    // The user is scrolling up!
                    } else if (this.previousPos >= this.currentPos && this.isScrollingDown == true) {
                        this.pixelsScrolled++;
                        if (this.pixelsScrolled > (this.options.sensitivity * 5)) {
                            this.isScrollingDown = false;
                            // Run scrollUp callback if there is one.
                            if (typeof this.options.scrollUp !== undefined) {
                                this.options.scrollUp();
                                this.options.sticky.removeClass("scrolling-down");
                            }
                            this.pixelsScrolled = 0;
                        }
                    }

                    // Adjust the body top margin as the height of the sticky header may
                    // have changed.
                    jQuery("body").css("margin-top", this.options.sticky.outerHeight());

                    // Set the previous position.
                    this.previousPos = this.currentPos;
                }.bind(this));
            }

            /**
             * Author: Santiago Ramirez
             * Create a sticky sidebar.
             */
            Sticky.prototype.sidebar = function() {
                var sticky = this.options.sticky;
                var stopAtDiv = this.options.stopAt;
                var bufferRoom = this.options.bufferRoom;
                var stickyWidth = sticky.width();
                var stickyHeight = sticky.height();
                var stickyTopPos = sticky.offset().top;
                var stickyLeftPos = sticky.offset().left;

                jQuery(window).scroll(stickySidebar);
                jQuery(window).resize(function() {
                    stickySidebarInactive();
                    stickySidebar();
                });

                function stickySidebar() {
                    // Don't run code if sticky is hidden.
                    if (sticky.css("display") == "none") {
                        return false;
                    }

                    var stopAt = stopAtDiv.offset().top;
                    var topMargin = parseFloat(jQuery("body").css("margin-top").replace("px", ""));
                    var currentPos = jQuery(document).scrollTop();
                    var stickyBottomPos = currentPos + stickyHeight + topMargin;

                    if (currentPos >= stickyTopPos && stickyBottomPos <= (stopAt - bufferRoom)) {
                        stickySidebarActive();
                    } else if (stickyBottomPos >= (stopAt - bufferRoom)) {
                        // Move sticky up after arriving at the stop at div.
                        sticky.css("top", ((((stopAt - stickyBottomPos) - bufferRoom) + topMargin) + "px"));
                    } else {
                        stickySidebarInactive();
                    }
                }

                // Make sticky active
                function stickySidebarActive() {
                    sticky.css({
                        "top": jQuery("body").css("margin-top"),
                        "left": stickyLeftPos + "px",
                        "width": stickyWidth + "px",
                        "position": "fixed"
                    });
                }

                // Make sticky inactive
                function stickySidebarInactive() {
                    sticky.css({
                        "top": "",
                        "left": "",
                        "width": "",
                        "position": "relative"
                    });

                    stickyWidth = sticky.outerWidth();
                    stickyHeight = sticky.height();
                    stickyTopPos = sticky.offset().top;
                    stickyLeftPos = sticky.offset().left;
                }
            }
        """

    'Partial Title' :
        'prefix' : 'partial-title'
        'body' : """
            ////////////////////////////////////////////////////////////////////////////////
            // ${1:Title}
            ////////////////////////////////////////////////////////////////////////////////
        """

    'Tabs' :
        'prefix' : 'wp-partial-tabs'
        'body' : """
            $(".${1:tabs}-wrapper .bxslider").bxSlider({
                adaptiveHeight : true,
                touchEnabled : true,
                controls : false,
                pagerCustom : "#${1:tab}-pager",
            });
        """

'.source.json': 

    'Name' :
        'prefix' : 'acf-json-cta'
        'body' : """
            {
                "key": "group_58b4950b7e662",
                "title": "Partial - CTA",
                "fields": [
                    {
                        "key": "field_58b4951ed10d7",
                        "label": "CTA Link",
                        "name": "cta_link",
                        "type": "text",
                        "instructions": "",
                        "required": 0,
                        "conditional_logic": [
                            [
                                {
                                    "field": "field_58b49530d10d9",
                                    "operator": "!=",
                                    "value": "1"
                                }
                            ]
                        ],
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "default_value": "#",
                        "placeholder": "",
                        "prepend": "",
                        "append": "",
                        "maxlength": ""
                    },
                    {
                        "key": "field_58b49527d10d8",
                        "label": "CTA Text",
                        "name": "cta_text",
                        "type": "text",
                        "instructions": "",
                        "required": 0,
                        "conditional_logic": [
                            [
                                {
                                    "field": "field_58b49530d10d9",
                                    "operator": "!=",
                                    "value": "1"
                                }
                            ]
                        ],
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "default_value": "Convallis at tellus",
                        "placeholder": "",
                        "prepend": "",
                        "append": "",
                        "maxlength": ""
                    },
                    {
                        "key": "field_58b49530d10d9",
                        "label": "Use HubSpot CTA instead?",
                        "name": "use_hubspot_cta",
                        "type": "true_false",
                        "instructions": "",
                        "required": 0,
                        "conditional_logic": 0,
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "message": "",
                        "default_value": 0,
                        "ui": 0,
                        "ui_on_text": "",
                        "ui_off_text": ""
                    },
                    {
                        "key": "field_58b49572d10da",
                        "label": "HubSpot CTA",
                        "name": "hubspot_cta",
                        "type": "textarea",
                        "instructions": "Copy and paste HubSpot CTA code here.",
                        "required": 0,
                        "conditional_logic": [
                            [
                                {
                                    "field": "field_58b49530d10d9",
                                    "operator": "==",
                                    "value": "1"
                                }
                            ]
                        ],
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "default_value": "",
                        "placeholder": "",
                        "maxlength": "",
                        "rows": "",
                        "new_lines": ""
                    }
                ],
                "location": [
                    [
                        {
                            "param": "post_type",
                            "operator": "==",
                            "value": "post"
                        }
                    ]
                ],
                "menu_order": 0,
                "position": "normal",
                "style": "default",
                "label_placement": "top",
                "instruction_placement": "label",
                "hide_on_screen": "",
                "active": 0,
                "description": "",
                "modified": 1488230100
            }
        """

    'Hero w/ Background Video' :
        'prefix' : 'acf-hero-video'
        'body' : """
            {
                "key": "group_57e2e87bd658d",
                "title": "Hero w\/ Video Background Fields",
                "fields": [
                    {
                        "key": "field_57e2e8bf69bad",
                        "label": "Title",
                        "name": "hero_title",
                        "type": "text",
                        "instructions": "",
                        "required": 0,
                        "conditional_logic": 0,
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "default_value": "",
                        "placeholder": "",
                        "prepend": "",
                        "append": "",
                        "maxlength": ""
                    },
                    {
                        "key": "field_57e2e8d969bae",
                        "label": "Description",
                        "name": "hero_description",
                        "type": "text",
                        "instructions": "",
                        "required": 0,
                        "conditional_logic": 0,
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "default_value": "",
                        "placeholder": "",
                        "prepend": "",
                        "append": "",
                        "maxlength": ""
                    },
                    {
                        "key": "field_57e2eabc69bb1",
                        "label": "Background Image",
                        "name": "hero_image",
                        "type": "image",
                        "instructions": "",
                        "required": 0,
                        "conditional_logic": 0,
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "return_format": "array",
                        "preview_size": "thumbnail",
                        "library": "all",
                        "min_width": "",
                        "min_height": "",
                        "min_size": "",
                        "max_width": "",
                        "max_height": "",
                        "max_size": "",
                        "mime_types": ""
                    },
                    {
                        "key": "field_57e3f7e92c0c0",
                        "label": "Use background video?",
                        "name": "use_background_video",
                        "type": "true_false",
                        "instructions": "Use a background video instead of an image. Image will still be used when video is not available.",
                        "required": 0,
                        "conditional_logic": 0,
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "message": "",
                        "default_value": 0
                    },
                    {
                        "key": "field_57e2ea7269bb0",
                        "label": "Background Video (WebM)",
                        "name": "hero_video_webm",
                        "type": "file",
                        "instructions": "A video in .webm format provides support for Firefox, Chrome, and Opera.",
                        "required": 0,
                        "conditional_logic": [
                            [
                                {
                                    "field": "field_57e3f7e92c0c0",
                                    "operator": "==",
                                    "value": "1"
                                }
                            ]
                        ],
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "return_format": "url",
                        "library": "all",
                        "min_size": "",
                        "max_size": "",
                        "mime_types": ".webm"
                    },
                    {
                        "key": "field_57e2ec7e90276",
                        "label": "Background Video (MP4)",
                        "name": "hero_video_mp4",
                        "type": "file",
                        "instructions": "A video in .mp4 format provides support for Safari and Internet Explorer 9.",
                        "required": 0,
                        "conditional_logic": [
                            [
                                {
                                    "field": "field_57e3f7e92c0c0",
                                    "operator": "==",
                                    "value": "1"
                                }
                            ]
                        ],
                        "wrapper": {
                            "width": "",
                            "class": "",
                            "id": ""
                        },
                        "return_format": "url",
                        "library": "all",
                        "min_size": "",
                        "max_size": "",
                        "mime_types": ".mp4"
                    }
                ],
                "location": [
                    [
                        {
                            "param": "page_template",
                            "operator": "==",
                            "value": "page-templates\/homepage.php"
                        }
                    ]
                ],
                "menu_order": 0,
                "position": "acf_after_title",
                "style": "default",
                "label_placement": "top",
                "instruction_placement": "label",
                "hide_on_screen": "",
                "active": 1,
                "description": "",
                "modified": 1474558062
            }
        """

'.source.php': 

    'Add Options Page' :
        'prefix' : 'acf-add-options-page'
        'body' : """
            /**
             * Add admin option pages
             * @link https://www.advancedcustomfields.com/resources/options-page/
             */
            if ( function_exists( 'acf_add_options_page' ) ) {
            	acf_add_options_page(array(
            		'page_title' 	=> '${1:Page Title}',
            	    'menu_title'	=> '${2:Menu Title}',
            		'menu_slug' 	=> '${3:menu-slug}',
            	));
            }
        """

    'Add Options Sub Page' :
        'prefix' : 'acf-add-options-sub-page'
        'body' : """
            acf_add_options_sub_page(array(
                'page_title' 	=> '${1:Page Title}',
                'menu_title'	=> '${2:Menu Title}',
                'parent_slug'	=> '${3:parent-menu-slug}',
            ));
        """

    'Dynamically Populate Select Field Choices' :
        'prefix' : 'acf-dynamically-populate-select-field-choices'
        'body' : """
            /**
             * Dynamically populate the select field choices of all fields with
             * the field name '${1:select_field_name}.'
             */
            function dynamically_populate_${1:select_field_name}_choices( $field ) {
                // Reset choices
                $field['choices'] = array();

                // Get the textarea value from options page without any formatting
                $choices = get_field( '${2:select_values}', 'option' );

                // Explode the value so that each line is a new array piece
                $choices = explode( '\\\\n', $choices );

                // Remove any unwanted white space
                $choices = array_map( 'trim', $choices );

                if ( is_array( $choices ) ) {
                    foreach( $choices as $choice ) {
                        $field['choices'][ $choice ] = $choice;
                    }
                }

                return $field;
            }

            add_filter( 'acf/load_field/name=${1:select_field_name}', 'dynamically_populate_${1:select_field_name}_choices' );
        """

    'Get Field' :
        'prefix' : 'acf-get-field'
        'body' : """
            get_field( \'${1:field_name}\' );
        """

    'Show Admin' :
        'prefix' : 'acf-show-admin'
        'body' : """
            /**
             * Only allow certain users to edit ACF fields.
             */
            function acf_show_admin( $show ) {
            	$current_user = wp_get_current_user();
            	$current_user = $current_user->user_login;

            	// User logins that are allowed to edit ACF fields.
            	$allowed_users = array(
            		'${1:allowed_user_login}',
            	);

            	// Test if current user is allowed to edit ACF fields.
            	if ( in_array( $current_user, $allowed_users ) ) {
            		return true;
            	}
            }

            add_filter( 'acf/settings/show_admin', 'acf_show_admin' );
        """

    'Google Maps API' :
        'prefix' : 'class-google-maps-geocode-api'
        'body' : """
            /**
             *
             * @author Santiago Ramirez
             * @link https://github.com/santiramirez
             * @modified 11/12/2014 6:40 PM
             *
             * The Google Maps API is a great thing, but the
             * returned array is not exactly the prettiest thing on the
             * internet, and can be kind of hectic to use.
             *
             * This class is used to make a Google Maps API call
             * and formats the returned array in a much easier to read
             * and use format.
             *
             */

            class GoogleMapsAPI
            {
                const API_URL = 'https://maps.googleapis.com/maps/api/geocode/json?address=';

                // These are the returned values

                public $address;
                public $city;
                public $country;
                public $countryAbbr;
                public $county;
                public $fullAddress;
                public $latitude;
                public $longitude;
                public $postalCode;
                public $state;
                public $stateAbbr;
                public $streetName;
                public $streetNumber;

                function __construct( $address )
                {
                    /**
                     *
                     * @author Santiago Ramirez
                     * @modified 11/12/2014 1:21 PM
                     *
                     * @desc Attempt to call the Google Maps API and return the
                     * response as an array.
                     *
                     */

                    try {
                        $request = self::API_URL . urlencode( $address );
                        $this->response = file_get_contents( $request );
                        $this->response = json_decode( $this->response, true );

                        $this->setLocationMeta();
                    }

                    catch ( Exception $e ) {
                        return false;
                    }
                }

                private function setLocationMeta()
                {
                    /**
                     *
                     * @author Santiago Ramirez
                     * @modified 11/12/2014 2:32 PM
                     *
                     * @desc Extract location meta data from the Google Maps API
                     * response and set its associated variable within the class.
                     *
                     */

                    $addressComponents = $this->response['results'][0]['address_components'];

                    // Extract address components of the given response.
                    // We use this foreach / switch combination becuase the response is
                    // not always returned in the same exact order.

                    foreach ( $addressComponents as $component )
                    {
                        switch( $component['types'][0] )
                        {
                            case 'locality' :
                                $this->city = $component['long_name'];
                                break;

                            case 'country' :
                                $this->country     = $component['long_name'];
                                $this->countryAbbr = $component['short_name'];
                                break;

                            case 'administrative_area_level_2' :
                                $this->county = $component['long_name'];
                                break;

                            case 'postal_code' :
                                $this->postalCode = $component['long_name'];
                                break;

                            case 'administrative_area_level_1' :
                                $this->state    = $component['long_name'];
                                $this->stateAbr = $component['short_name'];
                                break;

                            case 'route' :
                                $this->streetName = $component['long_name'];
                                break;

                            case 'street_number' :
                                $this->streetNumber = $component['long_name'];
                                break;
                        }
                    }

                    // Set address and full address
                    $this->address     = $this->streetNumber . ' ' . $this->streetName;
                    $this->fullAddress = $this->response['results'][0]['formatted_address'];

                    // Set latitude and longitude
                    $this->latitude  = $this->response['results'][0]['geometry']['location']['lat'];
                    $this->longitude = $this->response['results'][0]['geometry']['location']['lng'];
                }

                public function getCity() {
                    return $this->city;
                }

                public function getState() {
                    return $this->state;
                }

                public function getStateAbr() {
                    return $this->stateAbr;
                }

                public function getPostalCode() {
                    return $this->postalCode;
                }

                public function getCountry() {
                    return $this->country;
                }
            }
        """

    'HubspotAPI' :
        'prefix' : 'class-hubspot-api'
        'body' : """
            <?php

            /**
             * @author Santiago Ramirez
             */

            class HubspotAPI {

                private $_clientId = '';
                private $_clientSecret = '';
                private $_hubId = '';
                private $_redirectURI = '';
                private $_scope = '';
                private $_code = '';
                private $_accessToken;
                private $_refreshToken;

                /**
                 * @author Santiago Ramirez
                 * Authenticate our app with an access token.
                 */
                public function authenticate() {
                    $this->_code = isset($_GET['code']) ? $_GET['code'] : '';

                    // If we do not have a code and we do not have an access token, then we
                    // need to start the authorization by getting a code.
                    if ($this->_code === '' && !isset($_SESSION['hubspot_access_token'])) {
                        $this->_authorize();
                    }

                    // If we have a code, but we do not have an access token, then we
                    // need to use our code to get an access token.
                    else if (!isset($_SESSION['hubspot_access_token'])) {
                        return $this->_setAccessTokenFromCode();
                    }

                    // Access token exists.
                    else {
                        $this->_setTokenData();

                        // Access token exists, but has expired. We'll need to start a
                        // new session from the refresh token.
                        if ($_SESSION['hubspot_expires_at'] < time()) {
                            return $this->_setAccessTokenFromRefeshToken();
                        }

                        // Access token exists and is not expired.
                        // We are authenticated!
                        else {
                            return true;
                        }
                    }
                }

                /**
                 * @author Santiago Ramirez
                 * Authorize the Hub ID and get a code to authenticate.
                 */
                private function _authorize() {
                    $query_string = http_build_query(array(
                        'client_id' => $this->_clientId,
                        'scope' => $this->_scope,
                        'redirect_uri' => $this->_redirectURI
                    ));
                    $url = 'https://app.hubspot.com/oauth/'.$this->_hubId.'/authorize?'.$query_string;
                    header('Location:'.$url);
                }

                /**
                 * @author Santiago Ramirez
                 * Use HubSpot code to set access token.
                 */
                private function _setAccessTokenFromCode() {
                    $query_string = http_build_query(array(
                        'grant_type' => 'authorization_code',
                        'client_id' => $this->_clientId,
                        'client_secret' => $this->_clientSecret,
                        'redirect_uri' => $this->_redirectURI,
                        'code' => $this->_code,
                    ));

                    $curl = curl_init();

                    curl_setopt($curl, CURLOPT_URL, 'https://api.hubapi.com/oauth/v1/token?' . $query_string);
                    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($curl, CURLOPT_POST, true);
                    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded;charset=utf-8'));

                    $output = json_decode(curl_exec($curl), true);
                    curl_close($curl);

                    if (isset($output['access_token']) && ($output['access_token'])) {
                        $_SESSION['hubspot_access_token'] = $output['access_token'];
                        $_SESSION['hubspot_refresh_token'] = $output['refresh_token'];
                        $_SESSION['hubspot_expires_at'] = time() + $output['expires_in'];
                        $this->_setTokenData();
                        return true;
                    } else {
                        return false;
                    }
                }

                /**
                 * @author Santiago Ramirez
                 * Set access token from refresh token.
                 */
                private function _setAccessTokenFromRefeshToken() {
                    session_destroy();
                    $this->_authorize();
                }

                /**
                 * @author Santiago Ramirez
                 * Set token data from $_SESSION variable.
                 */
                private function _setTokenData() {
                    $this->_accessToken = $_SESSION['hubspot_access_token'];
                    $this->_refreshToken = $_SESSION['hubspot_refresh_token'];
                    $this->_expiresAt = time() + $_SESSION['hubspot_expires_at'];
                }

                /**
                 * @author Santiago Ramirez
                 * Set client ID
                 * @param string $client_id
                 */
                public function setClientId($client_id) {
                    $this->_clientId = $client_id;
                }

                /**
                 * Set client secret
                 * @param string $client_secret
                 */
                public function setClientSecret($client_secret) {
                    $this->_clientSecret = $client_secret;
                }

                /**
                 * @author Santiago Ramirez
                 * Set Hubspot account Id
                 * @param int $hub_id
                 */
                public function setHubId($hub_id) {
                    $this->_hubId = $hub_id;
                }

                /**
                 * @author Santiago Ramirez
                 * Set the redirect uri after authorization.
                 * @param string $redirect_uri
                 */
                public function setRedirectURI($redirect_uri) {
                    $this->_redirectURI = $redirect_uri;
                }

                /**
                 * @author Santiago Ramirez
                 * Set scope
                 * @param string $scope
                 */
                public function setScope($scope) {
                    $this->_scope = $scope;
                }

                /**
                 * @author Santiago Ramirez
                 * Send request to HubSpot
                 * @param string $resource
                 * @param array $data
                 */
                public function request($resource = '', $data = array()) {
                    $query_string = http_build_query($data);
                    $curl = curl_init();
                    curl_setopt($curl, CURLOPT_URL, 'https://api.hubapi.com/'.$resource.'?'.$query_string);
                    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $this->_accessToken));
                    $output = json_decode(curl_exec($curl), true);
                    curl_close($curl);
                    return $output;
                }
            }
        """

    'print_pre()' :
        'prefix' : 'fn-print-pre'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Same as print_r but output is contained within <pre> tags so that the
             * outputted value is formatted.
             * @param array $arr
             */
            function print_pre( $arr ) {
            	echo '<pre>';
            	print_r( $arr );
            	echo '</pre>';
            }
        """

    'strpos_array()' :
        'prefix' : 'fn-strpos-array'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Pass an array to strpos()
             * @param array $haystack
             * @param string $needle
             */
            function strpos_array( $haystack, $needle ) {
                foreach( $haystack as $haystack_item ) {
                    if ( strpos( $needle, $haystack_item ) !== false ) {
                        return true;
                    }
                }
                return false;
            }
        """

    'Register String' :
        'prefix' : 'pll-register-string'
        'body' : """
            pll_register_string( '${1:Name}', '${2:String}', '${3:Group}', false );
        """

    'adjust_masthead_top_position()' :
        'prefix' : 'wp-actn-adjust-masthead-top-position'
        'body' : """
            /**
             * Author: Santiago Ramirez
             * Adjust the top position of the masthead when a user
             * is logged in.
             */
            function adjust_masthead_top_position() {
                if ( is_user_logged_in() ) {
                    echo "<style type=\\\\"text/css\\\\" media=\\\\"screen\\\\">\\\\n";
                    echo ".masthead { top: 32px !important; }\\\\n";
                    echo "@media (max-width: 782px) {\\\\n.masthead { top: 46px !important; }\\\\n}\\\\n";
                    echo "@media (max-width: 600px) {\\\\n#wpadminbar { position: fixed !important; }}\\\\n";
                    echo "</style>\\\\n";
                }
            }

            add_action( 'wp_head', 'adjust_masthead_top_position' );
        """

    'Hide Plugins' :
        'prefix' : 'wp-actn-hide-plugins'
        'body' : """
            /**
             * @author Santiago Ramirez
             *
             * Hide certain plugins to prevent them from being disabled. This is helpful
             * if the site relies on the plugin.
             *
             * @uses strpos_array() Add 'fn-strpos-array' into your functions.php.
             */
            function hide_plugins() {
            	global $wp_list_table;
            	$hidden_plugins = array(
            		'advanced-custom-fields-pro',
                    ${1:// Add plugins to be hidden here}
            	);
            	$all_plugins = array_keys( $wp_list_table->items );
            	foreach ( $all_plugins as $plugin ) {
            		if ( strpos_array( $hidden_plugins, $plugin ) ) {
            			unset( $wp_list_table->items[$plugin] );
            		}
            	}
            }

            add_action( 'pre_current_active_plugins', 'hide_plugins' );
        """

    'Restrict Manage Posts By Post Type' :
        'prefix' : 'wp-actn-restrict-manage-posts-by-taxonomy'
        'body' : """
            /**
             * @author Santiago Ramirez
             *
             * Creates a filter on the admin edit.php page to sort ${1:post_type} posts
             * by ${2:taxonomy}.
             *
             * @uses restrict_manage_posts_by_taxonomy() Add 'wp-fn-restrict-manage-posts-by-taxonomy'
             * to your functions.php file.
             */
            function restrict_manage_${1:post_type}_by_${2:taxonomy}() {
                restrict_manage_posts_by_taxonomy( '${1:post_type}', '${2:taxonomy}' );
            }

            add_action( 'restrict_manage_posts', 'restrict_manage_${1:post_type}_by_${2:taxonomy}' );
        """

    'add_action( ... )' :
        'prefix' : 'wp-add-action'
        'body' : """
            /**
             * Author: ${3:Name}
             * ${4:What does this action do?}
             */
            function ${2:callback}() {
                ${5:// Your action code here}
            }

            add_action( '${1:hook}', '${2:callback}' );

        """

    'add_filter( ... )' :
        'prefix' : 'wp-add-filter'
        'body' : """
            /**
             * Author: ${4:Name}
             * ${5:What does this filter do?}
             */
            function ${2:callback}( $${3:data} ) {
                ${6:// Your filter code here}
                return $${3:data}
            }

            add_filter( '${1:hook}', '${2:callback}' );
        """

    'Form Handler' :
        'prefix' : 'wp-ajax-form-handler'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Handle form submission for '${1:action}'
             */
            function form_handler_${1:action}() {
            	$request = array(
            		'wpnonce' => isset( $_REQUEST['wpnonce'] ) ? $_REQUEST['wpnonce'] : false,
            		'action' => isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : false,
                    // Additional parameters here
            	);

                // Verify wpnonce for security purposes
            	if ( wp_verify_nonce( $request['wpnonce'],  $request['action'] ) ) {
            	}

                // Do not delete this
            	wp_die();
            }

            add_action( 'wp_ajax_nopriv_${1:action}', 'form_handler_${1:action}' );
            add_action( 'wp_ajax_${1:action}', 'form_handler_${1:action}' );
        """

    'Do Shortcode' :
        'prefix' : 'wp-do-shortcode'
        'body' : """
            do_shortcode( ${1:$content} );$2
        """

    'Enqueue Script' :
        'prefix' : 'wp-enqueue-script'
        'body' : """
            wp_enqueue_script( '${1:handle}', ${2:get_template_directory_uri() . '/js/'}, array( '$3' ), '$4', ${5:true} );
        """

    'Add \'page_template\' Request Variable' :
        'prefix' : 'wp-fltr-add-page-template-request-var'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Adds the 'page_template' request variable which queries posts by
             * their page template.
             * @param array $query
             */
            function add_page_template_request_var($query) {
                $page_template = isset($_GET['page_template']) ? trim($_GET['page_template']) : '';
                if ($page_template != '' && $page_template != 'all') {
                    $page_templates_meta_query = array(
                        'meta_query' => array(
                            array(
                                'key' => '_wp_page_template',
                                'value' => $page_template,
                                'compare' => '=',
                            ),
                        ),
                    );
                    $query = array_merge($query, $page_templates_meta_query);
                }
                return $query;
            }

            add_filter('request', 'add_page_template_request_var');
        """

    'Remove <p> Tags From Buttons' :
        'prefix' : 'wp-fltr-remove-p-tags-from-buttons'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Remove the <p> tags of a <p> tag that contains a button.
             */
            function remove_p_tags_from_buttons($content) {
                $pattern = '#<\\\\s*?p\\\\b[^>]*>(.*?)</p\\\\b[^>]*>#s';
                $content = preg_replace_callback($pattern, function($matches) {
                    $lookfor = array('btn', 'btn-lg', 'btn-sm', 'btn-xs');
                    if (strpos_array($lookfor, $matches[1])) {
                        return $matches[1];
                    } else {
                        return $matches[0];
                    }
                }, $content);
                return $content;
            }

            add_filter('acf/format_value/type=wysiwyg', 'remove_p_tags_from_buttons', 999999);
        """

    'Single Category Template' :
        'prefix' : 'wp-fltr-single-category-template'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Create a category-specific single template.
             */
            function single_category_template( $default_template ) {
                $categories = get_the_category();
                foreach ( $categories as $category ) {
                    $single_category_template = TEMPLATEPATH . '/single-cat-' . $category->slug . '.php';
                    if ( file_exists( $single_category_template ) ) {
                        return $single_category_template;
                    }
                }
                return $default_template;
            }

            add_filter( 'single_template', 'single_category_template' );
        """

    'get_all_post_terms()' :
        'prefix' : 'wp-fn-get-all-post-terms'
        'body' : """
            /**
             * @author Santiago Ramirez
             *
             * Return all possible taxonomy terms that belong to a post or
             * only a select few.
             *
             * @param int $post_id
             * @param null|array $taxonomies Array of taxonomies to get taxonomy terms for.
             * If set to null, all possible taxonomy terms will be returned.
             * @param string $return_format 'id', 'slug' or 'object'
             *
             * @return array
             */
            function get_all_post_terms( $post_id, $taxonomies = null, $return_format = 'object' ) {

                // Callback for extracting term_id
                function extract_tax_term_id( $term ) {
                    return $term->term_id;
                }

                // Callback for extracting term_slug
                function extract_tax_term_slug( $term ) {
                    return $term->slug;
                }

                $all_taxonomy_terms = array();

                if ( $taxonomies === null ) {
                    $taxonomies = get_taxonomies();
                    $unset_taxonomies = array( 'nav_menu', 'link_category', 'post_format' );
                    foreach ( $unset_taxonomies as $unset_taxonomy ) {
                        unset( $taxonomies[$unset_taxonomy] );
                    }
                    $taxonomies = array_keys( $taxonomies );
                } else if ( !is_array( $taxonomies ) ){
                    $taxonomies = array();
                }

                foreach ( $taxonomies as $taxonomy ) {
                    $terms = get_the_terms( $post_id, $taxonomy );
                    if ( !empty( $terms ) ) {
                        $all_taxonomy_terms[$taxonomy] = $terms;
                    }
                }

                if ( $return_format === 'term_id' || $return_format === 'slug' ) {
                    $callback = 'extract_tax_term_' . str_replace( 'term_', '', $return_format );
                    foreach ( $all_taxonomy_terms as $taxonomy => $taxonomy_terms ) {
                        $all_taxonomy_terms[$taxonomy] = array_map( $callback, $taxonomy_terms );
                    }
                }

                return $all_taxonomy_terms;
            }
        """

    'Get Breadcrumbs' :
        'prefix' : 'wp-fn-get-breadcrumbs'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Return a list of breadcrumbs for the current page.
             *
             * @param $post_id int The post id to get breadcrumbs for. Uses the global
             * $post by default.
             * @param $sep string The separator to separate each breadcrumb.
             * @param $home_text string The text of the 'Home' breadcrumb.
             */
            function get_breadcrumbs($post_id = false, $sep = false, $home_text = false) {
                $post_id = ($post_id) ? $post_id : false;
                $sep = ($sep) ? $sep : '&rarr;';
                $home_text = ($home_text) ? $home_text : 'Home';

                if ($post_id) {
                    $post = get_posts(array('ID' => $post_id));
                    $post = $post[0];
                } else {
                    global $post;
                }

            	$breadcrumbs = array();
            	$breadcrumbs[0] = array(
                    'title' => $home_text,
                    'permalink' => get_home_url(),
                );

                $ancestor_ids = get_ancestors($post->ID, "page");
            	$ancestor_ids = array_reverse($ancestor_ids);
            	foreach ($ancestor_ids as $ancestor_id) {
            		$ancestor = get_page($ancestor_id);
            		$breadcrumbs[] = array(
                        'title' => $ancestor->post_title,
                        'permalink' => get_the_permalink($ancestor->ID)
                    );
            	}

            	$breadcrumbs[] = array(
                    'title' => $post->post_title,
                    'permalink' => '#'
                );

                return $breadcrumbs;
            }

            /**
             * @author Santiago Ramirez
             * Print a list of breadcrumbs for the current page.
             *
             * @param $post_id int The post id to get breadcrumbs for. Uses the global
             * $post by default.
             * @param $sep string The separator to separate each breadcrumb.
             * @param $home_text string The text of the 'Home' breadcrumb.
             */
            function the_breadcrumbs($post_id = false, $sep = false, $home_text = false) {
                $count = 0;
                $breadcrumbs = get_breadcrumbs($post_id, $sep, $home_text);

                ?>

                <ol class="breadcrumbs" itemscope itemtype="http://schema.org/BreadcrumbList">
                    <?php foreach ($breadcrumbs as $breadcrumb) : ?>
                        <li class="breadcrumb" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                            <a itemscope itemtype="http://schema.org/Thing" itemprop="item" href="<?php echo $breadcrumb['permalink']; ?>">
                                <span itemprop="name"><?php echo $breadcrumb['title']; ?></span>
                            </a>
                            <meta itemprop="position" content="<?php echo $count + 1; ?>" />
                        </li>
                        <?php if ($count != (count($breadcrumbs) - 1)) : ?>
                            <span class="sep"><?php echo $sep; ?></span>
                        <?php endif; ?>
                        <?php $count++; ?>
                    <?php endforeach ?>
                </ol>

                <?php
            }
        """

    'Get Current Template' :
        'prefix' : 'wp-fn-get-current-template'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Define the current template.
             */
            function define_current_template($template) {
                $GLOBALS['current_theme_template'] = basename($template);
                return $template;
            }

            add_action('template_include', 'define_current_template', 1000);

            /**
             * @author Santiago Ramirez
             * Returns the file name of the current theme template being rendered.
             * Does not include the file extension.
             */
            function get_current_template() {
                if (!isset($GLOBALS['current_theme_template'])) {
                    return false;
                }
                return str_replace('.php', '', $GLOBALS['current_theme_template']);
            }
        """

    'get_distinct_meta_values' :
        'prefix' : 'wp-fn-get-distinct-meta-values'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Return distinct meta values given the meta meta key
             */
            function get_distinct_meta_values($meta_key = '', $post_type = 'post', $post_status = 'publish') {
                global $wpdb;

                if (empty($meta_key)) {
                    return;
                }

                $query  = 'select distinct pm.meta_value from '.$wpdb->postmeta.' pm ';
                $query .= 'left join '.$wpdb->posts.' p on p.ID = pm.post_id ';
                $query .= 'where pm.meta_key = \\\\'%s\\\\' ';
                $query .= 'and p.post_status = \\\\'%s\\\\' ';
                $query .= 'and p.post_type = \\\\'%s\\\\'';

                return $wpdb->get_col($wpdb->prepare($query, $meta_key, $post_status, $post_type));
            }
        """

    'Get Future Months' :
        'prefix' : 'wp-fn-get-future-months'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Get the start and end dates of all future months.
             * @param int $num_of_months The number of months into the future to get.
             */
            function get_future_months($num_of_months) {
                $months = array();
                $today = new DateTime();
                $month_start = clone $today;
                $month_start->modify('-' . ($today->format('j') - 1) . ' day');

                for ($count = 0; $count <= ($num_of_months - 1); $count++) {
                    $month_start = isset($month_end) ? clone $month_end : $month_start;
                    $month_end = clone $month_start;
                    $month_end->modify('+1 month');

                	if ($count === 0) {
                		$months[$count] = array(
                			'name' => $today->format('F'),
                			'start' => $today->format('Ymd'),
                            'end' => $month_end->format('Ymd')
                		);
                	} else {
                        $months[$count] = array(
                            'name' => $month_start->format('F'),
                            'start' => $month_start->format('Ymd'),
                            'end' => $month_end->format('Ymd')
                        );
                	}
                }
                return $months;
            }
        """

    'Get Nav Menu Item Children' :
        'prefix' : 'wp-fn-get-nav-menu-item-children'
        'body' : """
            /**
             * Returns all child nav_menu_items under a specific parent
             * @param int $parent_id
             * @param string $location
             * @param boolean $depth
             */
            function get_nav_menu_item_children($parent_id, $location, $depth = true) {
            	$locations = get_nav_menu_locations();
            	$nav_menu_items = wp_get_nav_menu_items($locations[$location]);
            	$nav_menu_item_list = array();

            	foreach ($nav_menu_items as $nav_menu_item) {
            		if ($nav_menu_item->menu_item_parent == $parent_id) {
            			$nav_menu_item_list[] = $nav_menu_item;
            			if ($depth) {
            				if ($children = get_nav_menu_item_children($nav_menu_item->ID, $location)) {
            					$nav_menu_item_list = array_merge($nav_menu_item_list, $children);
            				}
            			}

            		}
            	}

            	return $nav_menu_item_list;
            }
        """

    'Get Related Posts' :
        'prefix' : 'wp-fn-get-related-posts'
        'body' : """
            /**
             * Return an array of posts that are related to the current post.
             * @param string $post_type The post type of posts to be returned.
             * @param array $taxonomies Search for terms within the given taxonomies
             * which match that of the current post.
             */
            function get_related_posts($post_type, $taxonomies = false) {

                global $post;
            	$query_post_type = $post_type;
            	if ($post_type == 'class' || $post_type == 'workshop') {
            		$query_post_type = array('class', 'workshop');
            	}

            	$args = array(
            		'post_type' => $query_post_type,
            		'orderby' => 'rand',
            		'posts_per_page'=> 3,
            		'post__not_in' => array($post->ID),
            	);

            	// Exclude the school calendar for the events post type. This is
            	// specific to the ASL website.
            	if ($post_type == 'event') {
            		$args['meta_key'] = 'date';
            		$args['order'] = 'ASC';
            		$args['orderby'] = 'meta_value';

            		$excluded_cat = get_category_by_slug('school-calendar');
            		if ($excluded_cat) {
            			$args['category__not_in'] = array($excluded_cat->term_id);
            		}

            		$today = new DateTime;
            		$args['meta_query'] = array(
            			'relation'    => 'OR',
            			array(
            				'key'     => 'date',
            				'value'   => $today->format('Ymd'),
            				'type'    => 'numeric',
            				'compare' => '>='
            			),
            			array(
            				'key'     => 'end_date',
            				'value'   => $today->format('Ymd'),
            				'type'    => 'numeric',
            				'compare' => '>='
            			));
            	}

            	if (($post_type == 'class' || $post_type == 'workshop') && get_field('class_filter_initial_season_to_display', 'option')) {
            		$args['season'] = array();
            		$seasons = get_field('class_filter_initial_season_to_display', 'option');
            		foreach ($seasons as $season) {
            			$args['season'][] = $season->slug;
            		}
            	}


            	if ($taxonomies) {
            		// Create the tax_query array of taxonomy terms to query by.
            		$args['tax_query'] = array();
            		$args['tax_query'][0] = array('relation' => 'OR');
            		$i = 1;

            		foreach ($taxonomies as $taxonomy) {
            			$terms = wp_get_post_terms($post->ID, $taxonomy);
            			$term_ids = array();

            			foreach ($terms as $term) {
            				$term_ids[] = $term->term_id;
            			}

            			$args['tax_query'][$i] = array(
            				'taxonomy' => $taxonomy,
            				'field'    => 'term_id',
            				'terms'    => $term_ids,
            			);

            			$i++;
            		}
            	}

            	$query = new WP_Query($args);
            	return $query;
            }
        """

    'Get Siblings' :
        'prefix' : 'wp-fn-get-siblings'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Return a list of siblings.
             */
             function get_siblings($page_id) {
             	$page = get_page($page_id);

             	if ($page->post_parent !== 0) {
             		$args = array(
             			'post_parent' => $page->post_parent,
             			'post_type' => 'page',
             			'orderby' => 'title',
             			'order' => 'ASC',
             			'exclude' => $page_id
             		);

             		$siblings = get_children($args);
             		return $siblings;
             	} else {
             		return false;
             	}
             }

            /**
             * @author Santiago Ramirez
             * Print a list of siblings.
             */
            function the_siblings($page_id, $class) {
            	$siblings = get_siblings($page_id);
            	if ($siblings) {
            		echo '<ul class="' . $class . '">';
            		foreach ($siblings as $sibling) {
            			echo '<li><a href="' . get_permalink($sibling->ID) . '">';
            			echo $sibling->post_title . '</a></li>';
            		}
            		echo '</ul>';
            	}
            }
        """

    'Is Template' :
        'prefix' : 'wp-fn-is-template'
        'body' : """
            /**
             * @author Santiago Ramirez
             * Check if the current template being rendered is a specified template.
             * @param string|array $template
             * @uses wp-fn-get-current-template to get current template.
             * Add in functions.php before this function.
             */
            function is_template($template) {
                if (function_exists('get_current_template')) {
                    $current_template = get_current_template();
                    if (is_array($template)) {
                        if (empty(array_diff(array($current_template), $template))) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        if ($current_template == $template) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            }
        """

    'Get Current Template' :
        'prefix' : 'wp-get-current-template'
        'body' : """
            get_current_template();
        """

    'Get Post Terms' :
        'prefix' : 'wp-get-post-terms'
        'body' : """
            $${1:taxonomy}_terms = wp_get_post_terms( ${2:$post->ID}, '${1:taxonomy}', ${3:$args} );
            foreach ( $${1:taxonomy}_terms as $${1:taxonomy}_term ) {
                ${4:Your code here...}
            }
        """

    'Get Posts' :
        'prefix' : 'wp-get-posts'
        'body' : """
            $${1:posts} = get_posts(array(
                'post_type' => '${1:posts}',
                $2
            ));
            $3
        """

    'Get The Permalink' :
        'prefix' : 'wp-get-the-permalink'
        'body' : """
            get_the_permalink( $1 )$2
        """

    'if ( is_template() ) ...' :
        'prefix' : 'wp-if-is-template'
        'body' : """
            if ( is_template( array( '$1' ) ) ) {
                $2
            }$3
        """

    'wp-insert-post' :
        'prefix' : 'wp-insert-post'
        'body' : """
        	$post = array();
        	$post['post_type'] = 'post';
            $post['post_status'] = 'publish';
        	$post['post_title'] = '';
        	$post['meta_input'] = array();

        	wp_insert_post( $post );
        """

    'Localize Script' :
        'prefix' : 'wp-localize-script'
        'body' : """
            wp_localize_script( '${1:handle}', '${2:name}', $${3:data} );$4
        """

    'WP Query' :
        'prefix' : 'wp-query'
        'body' : """
            $query = new WP_Query(array(
                ${1:/* Your query here... */}
            ));

            if ( $query->have_posts() ) {
                while ( $query->have_posts() ) {
                    $query->the_post();
                    $2
                }
            }
        
            wp_reset_query();
        """

    'Register Post Type' :
        'prefix' : 'wp-register-post-type'
        'body' : """
            /**
             * Register '${1:...}' custom post type.
             * @link https://codex.wordpress.org/Function_Reference/register_post_type
             */
            function register_cpt_${1:}() {
                $plural_name = '${2:Plural Name}';
                $singular_name = '${3:Singular Name}';

                $labels = array(
                    'name' => __( $plural_name ),
                    'singular_name' => __( $singular_name ),
                    'add_new_item' => __( 'Add New ' . $singular_name ),
                    'edit_item' => __( 'Edit ' . $singular_name ),
                    'new_item' => __( 'New ' . $singular_name ),
                    'view_item' => __( 'View ' . $singular_name ),
                    'search_items' => __( 'Search ' . $plural_name ),
                    'not_found' => __( 'No ' . strtolower( $plural_name ) . ' found.' ),
                    'not_found_in_trash' => __( 'No ' . strtolower( $plural_name ) . ' found in Trash.' ),
                    'parent_item_colon' => __( 'Parent ' . $singular_name ),
                    'all_items' => __( 'All ' . $plural_name ),
                    'archives' => __( $singular_name . ' Archives' ),
                    'insert_into_item' => __( 'Insert into ' . strtolower( $singular_name ) ),
                    'uploaded_to_this_item' => __( 'Uploaded to this ' . strtolower( $singular_name ) ),
                 );

                $args = array(
                    'labels' => $labels,
                    'description' => '',
                    'public' => true,
                    'publicly_queryable' => true,
                    'exclude_from_search' => false,
                    'menu_position' => 20,
                    'capability_type' => 'post',
                    'map_meta_cap' => null,
                    'hierarchical' => false,
                    'supports' => array( 'title', 'thumbnail' ),
                    'taxonomies' => array(),
                    'has_archive' => false,
                    'rewrite' => array( 'slug' => '$1', 'with_front' => true ),
                    'query_var' => false,
                    'show_in_rest' => false,
                    'rest_base' => '$1',
                 );

                register_post_type( '$1', $args );
            }

            add_action( 'init', 'register_cpt_$1' );
        """

    'Register Query Vars' :
        'prefix' : 'wp-register-query-vars'
        'body' : """
            /**
             * Register query vars that can be used within WordPress.
             * @link https://codex.wordpress.org/Function_Reference/get_query_var
             */
            add_filter('query_vars', 'register_query_vars');

            function register_query_vars($public_query_vars) {
                $query_vars = array(
                	'${1:}'
                );
                foreach ($query_vars as $query_var) {
                    $public_query_vars[] = $query_var;
                }
                return $public_query_vars;
            }
        """

    'Register Taxonomy' :
        'prefix' : 'wp-register-taxonomy'
        'body' : """
            /**
             * Register '${1:...}' taxonomy.
             * @link https://codex.wordpress.org/Function_Reference/register_taxonomy
             */
            function register_tax_$1() {
                $plural_name = '${2:Plural Name}';
            	$singular_name = '${3:Singular Name}';

            	$labels = array(
            		'name' => __( $plural_name ),
            		'singular_name' => __( $singular_name ),
            		'all_items' => __( 'All ' . $plural_name ),
            		'edit_item' => __( 'Edit ' . $singular_name ),
            		'view_item' => __( 'View ' . $singular_name ),
            		'update_item' => __( 'Update ' . $singular_name ),
            		'add_new_item' => __( 'Add New ' . $singular_name ),
            		'new_item_name' => __( 'New ' . $singular_name . ' Name' ),
            		'parent_item' => __( 'Parent ' . $singular_name ),
            		'parent_item_colon' => __( 'Parent ' . $singular_name . ':' ),
            		'search_items' => __( 'Search ' . $plural_name ),
            		'popular_items' => __( 'Popular ' . $plural_name ),
            		'separate_items_with_commas' => __( 'Separate ' . strtolower( $plural_name ) . ' with commas' ),
            		'add_or_remove_items' => __( 'Add or remove ' . strtolower( $plural_name ) ),
            		'choose_from_most_used' => __( 'Choose from the most used ' . strtolower( $plural_name ) ),
            		'not_found' => __( 'No ' . strtolower( $plural_name ) . ' found.' ),
            	);

                $args = array(
                    'labels' => $labels,
                    'public' => true,
                    'show_ui' => true,
                    'show_admin_column' => true,
                    'hierarchical' => true,
                    'query_var' => true,
                    'rewrite' => array( 'slug' => '$1' ),
                );

                register_taxonomy( '$1', null, $args );
            }

            add_action( 'init', 'register_tax_$1' );
        """

    '/custom-endpoints/v1/posts-by-event-date' :
        'prefix' : 'wp-rest-custom-endpoint-posts-by-event-date'
        'body' : """
            /*
            Resource URI: /wp-json/custom-endpoints/v1/posts-by-event-date
            params:
            post_type - Post type
            after - Get event-based posts after a specific date. Must be in yyyymmdd format
            before - Get event-based posts before a specific date. Must be in yyyymmdd format
            order - ASC or DESC
            */
            function register_posts_by_event_date_route() {
            	$args = array(
            		'methods' => 'GET',
            		'callback' => 'handle_posts_by_event_date_route',
            		'args' => array(
            			'order' => array(
            				'default' => 'asc',
            			),
            			'post_type' => array(
            				'default' => 'event',
            			),
            		),
            	);

            	register_rest_route( 'custom-endpoints/v1', '/posts-by-event-date', $args );
            }

            add_action( 'rest_api_init', 'register_posts_by_event_date_route' );

            function handle_posts_by_event_date_route( $request ) {
            	$before_date = $request->get_param( 'before' );
            	$after_date = $request->get_param( 'after' );

            	$meta_query = array(
            		'relation' => 'AND',
            	);

            	if ( isset( $after_date ) ) {
            		$meta_query[] = array(
            			'relation' => 'OR',
            			array(
            				'key' => 'date',
            				'value' => $after_date,
            				'type' => 'numeric',
            				'compare' => '>=',
            			),
            			array(
            				'key' => 'end_date',
            				'value' => $after_date,
            				'type' => 'numeric',
            				'compare' => '>=',
            			),
            		);
            	}

            	if ( isset( $before_date ) ) {
            		$meta_query[] = array(
            			'relation' => 'OR',
            			array(
            				'key' => 'date',
            				'value' => $before_date,
            				'type' => 'numeric',
            				'compare' => '<=',
            			),
            		);
            	}

            	$args = array(
            		'post_type' => $request->get_param( 'post_type' ),
            		'order' => $request->get_param( 'order' ),
            		'orderby' => 'meta_value',
            		'meta_key' => 'date',
            		'meta_query' => $meta_query,
            	);

            	$posts = get_posts( $args );
            	return $posts;
            }
        """

    'Tax Query Inner' :
        'prefix' : 'wp-tax-query-inner'
        'body' : """
            array(
                'taxonomy' => '${1:taxonomy}',
                'field' => '${2:term_id}', // Accepts term_id, name or slug
                'terms' => array($3), // Terms to include
            ),
        """

    'Tax Query' :
        'prefix' : 'wp-tax-query'
        'body' : """
            'tax_query' => array(
                ${1:'relation' => '$2', // Accepts'AND' or 'OR'... Only used with multiple inner taxonomy arrays.}
                array(
                    'taxonomy' => '${3:taxonomy}',
                    'field' => '${4:term_id}', // Accepts term_id, name or slug
                    'terms' => array($5), // Terms to include
                ),
            ),
        """

'.source.scss': 

    '@include breakpoint' :
        'prefix' : 'breakpoint'
        'body' : """
            @include breakpoint(${1:sm}) {
                $2
            }$3
        """

    'btn-close-circle' :
        'prefix' : 'btn-close-circle'
        'body' : """
            $close-size: 45px;
            .btn-close-circle {
                @include border-radius($close-size);
                @include box-shadow(0px 0px 10px #111);
                color: #555;
                background-color: #fff;
                width: $close-size;
                height: $close-size;
                line-height: $close-size;
                position: absolute;
                top: -($close-size / 2);
                right: -($close-size / 2);
                z-index: 200;
                font-weight: normal;
                text-align: center;
                cursor: pointer;
                opacity: 1;
            }
            .btn-close-circle:hover {
            }
        """

    'Background Slideshow' :
        'prefix' : 'bx-background-slideshow'
        'body' : """
            .${1:background-slideshow} {
                position: absolute;
                top: 0;
                bottom: 0;
                left: 0;
                right: 0;
                .bx-viewport {
                    height: auto !important;
                }
                .bx-viewport,
                .bxslider {
                    position: absolute !important;
                    top: 0;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    z-index: 50;
                }
                .bxslider,
                .bxslider li {
                    margin: 0;
                    padding: 0;
                }
                .bxslider li {
                    height: 100%;
                    width: 100%;
                }
            }
        """

    'Hero Wrapper' :
        'prefix' : 'hero-wrapper'
        'body' : """
            /**
             * Dependents:
             *
             * (1) In sass/_mixins.scss, insert 'mixin-hero-height', if not already.
             * (2) In sass/_mixins.scss, insert 'mixin-breakpoint', if not already.
             */

            /* ${1:Hero Name}
            ------------------------------------------------------------------------------*/
            #hero-${2:name} {
                $hero-height-lg: 650;
                $hero-height-md: 550;
                $hero-height-sm: 450;
                $hero-height-xs: 350;

                @include hero-height($hero-height-lg);
                .hero-title {
                }
                .hero-description {
                }
                @include breakpoint(md) {
                    @include hero-height($hero-height-md);
                }
                @include breakpoint(sm) {
                    @include hero-height($hero-height-sm);
                }
                @include breakpoint(xs) {
                    @include hero-height($hero-height-xs);
                }
            }
        """

    '@mixin border-radius' :
        'prefix' : 'mixin-border-radius'
        'body' : """
            /**
             * Add cross-browser border radius
             */
            @mixin border-radius($radius) {
                border-radius: $radius;
                -moz-border-radius: $radius;
                -webkit-border-radius: $radius;
            }
        """

    '@mixin box-shadow' :
        'prefix' : 'mixin-box-shadow'
        'body' : """
            /**
             * Add cross-browser border radius
             */
            @mixin box-shadow($box-shadow) {
                box-shadow: $box-shadow;
                -moz-box-shadow: $box-shadow;
                -webkit-box-shadow: $box-shadow;
            }
        """

    '@mixin breakpoint' :
        'prefix' : 'mixin-breakpoint'
        'body' : """
            /**
             * Add media queries
             */
            @mixin breakpoint($point) {
                 @if $point == lg {
                    @media (max-width: $screen-lg) {
                         @content;
                    }
                }
                @else if $point == md {
                     @media (max-width: $screen-md) {
                        @content;
                    }
                }
                @else if $point == sm {
                     @media (max-width: $screen-sm) {
                        @content;
                    }
                }
                @else if $point == xs {
                     @media (max-width: $screen-xs) {
                        @content;
                    }
                } @else {
                    @media (max-width: $point + "px") {
                       @content;
                   }
                }
            }
        """

    '@mixin gradient' :
        'prefix' : 'mixin-gradient'
        'body' : """
            /**
             * Generate a cross-browser CSS gradient.
             *
             * @param string|int $orientation The orientation to display the gradient
             * (horizontal, vertical or radial). This could also be a number value to
             * achieve diagonal gradients.
             *
             * @param array $gradient-lines A nested array that defines the gradient lines
             * to be created. Each nested array item should be in the following format,
             * ($color <hex> or <rgba>, $stop-point <percentage>)
             */
            @mixin gradient($orientation, $gradient-lines) {
                $axis: "";
                $axis-newer-browsers: "";
                $gradient-type: "linear-gradient";
                $gradient-type-ie: 1;
                $gradient-property: "";

                $color-start: nth(nth($gradient-lines, 1), 1);
                $color-end: nth(nth($gradient-lines, length($gradient-lines)), 1);

                @each $gradient-line in $gradient-lines {
                    $color: nth($gradient-line, 1);
                    $gradient-property: $gradient-property + ", " + $color;
                    @if length($gradient-line) == 2 {
                        $stop-point: nth($gradient-line, 2);
                        $gradient-property: $gradient-property + " " + $stop-point;
                    }
                }

                @if $orientation == horizontal {
                    $axis: "left";
                    $axis-newer-browsers: "to right";
                } @elseif $orientation == vertical {
                    $axis: "top";
                    $axis-newer-browsers: "to bottom";
                    $gradient-type-ie: 0;
                } @elseif $orientation == radial {
                    $axis: "center, ellipse cover";
                    $axis-newer-browsers: "ellipse at center";
                    $gradient-type: "radial-gradient";
                } @else {
                    $axis: $orientation + "deg";
                    $axis-newer-browsers: (180 + $orientation) + "deg";
                }

                background: #\{$color-start}; // Older browsers
                background: #\{"-moz-" + $gradient-type + "(" + $axis + $gradient-property + ")"}; // FF3.6-15
                background: #\{"-webkit-" + $gradient-type + "(" + $axis + $gradient-property + ")"}; // Chrome10-25,Safari5.1-6
                background: #\{$gradient-type + "(" + $axis-newer-browsers + $gradient-property + ")"}; // W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+
                filter: progid:DXImageTransform.Microsoft.gradient(startColorstr= '#\{$color-start}', endColorstr='#\{$color-end}', GradientType=#\{$gradient-type-ie}); // IE6-9
            }
        """

    '@mixin hero-height' :
        'prefix' : 'mixin-hero-height'
        'body' : """
            /**
             * Sets the height of elements necessary to modify the height
             * of a hero.
             */
            @mixin hero-height($height, $padding-top : 0, $padding-bottom : 0) {
                $height : em($height - $padding-top - $padding-bottom);
                height: auto;
                padding-top: em($padding-top);
                padding-bottom: em($padding-bottom);
                .background-video {
                    min-height: $height;
                }
                .vertical-align-outer {
                    min-height: $height;
                }
            }
        """

    '@mixin placeholder' :
        'prefix' : 'mixin-placeholder'
        'body' : """
            /**
             * Add cross-browser placeholder styles
             */
            @mixin placeholder {
                &::-webkit-input-placeholder {
                    @content;
                }
                &::-moz-placeholder {
                    @content;
                }
                &:-moz-placeholder {
                    @content;
                }
                &:-ms-input-placeholder {
                    @content;
                }
            }
        """

    '@mixin transition' :
        'prefix' : 'mixin-transition'
        'body' : """
            /**
             * Add cross-browser transition
             */
            @mixin transition($transition) {
                transition: $transition;
                -o-transition: $transition;
                -webkit-transition: $transition;
            }
        """

    'Partial Title' :
        'prefix' : 'partial-title'
        'body' : """
            /* ${1:Partial Title}
            ------------------------------------------------------------------------------*/
            $2
        """

    'Page Breadcrumbs' :
        'prefix' : 'wp-page-breadcrumbs'
        'body' : """
            $breadcrumb-padding: 15px;
            .page-breadcrumbs {
            	.breadcrumbs {
            		list-style-type: none;
            		margin: 0;
            		padding: 0;
            		li {
            			background-color: transparent;
            			display: inline-block;
            			width: auto;
            			margin: 0;
            			padding: 0;
            			a {
            				display: block;
            				padding: $breadcrumb-padding;
            			}
            			a[href="#"] {
            				color: #555;
            				cursor: default;
            				text-decoration: none;
            			}
            		}
            		li.breadcrumb {
            		}
            		li.sep {
            			padding: $breadcrumb-padding;
            		}
            	}
            }
        """

    'Hero w/ Background Video' :
        'prefix' : 'wp-partial-hero-video'
        'body' : """
            /* Hero w/ Background Video
            ------------------------------------------------------------------------------*/
            $hero-height-lg: 650;
            $hero-height-md: 550;
            $hero-height-sm: 450;
            $hero-height-xs: 300;

            .hero-wrapper-video {
                @include hero-height($hero-height-lg);
                position: relative;
                .background-video {
                    overflow: hidden;
                    position: absolute;
                    z-index: 10;
                    top: 0;
                    left: 0;
                    bottom: 0;
                    right: 0;
                    video {
                        position: absolute;
                        z-index: -1;
                        top: 0;
                        min-width: 100%;
                        min-height: 100%;
                        width: auto;
                        height: auto;
                        background-size: cover;
                    }
                }
                .contain,
                .contain-xs {
                    position: relative;
                    z-index: 20;
                }
                @include breakpoint (md) {
                    @include hero-height($hero-height-md);
                }
                @include breakpoint(sm) {
                    @include hero-height($hero-height-sm);
                }
                @include breakpoint(xs) {
                    @include hero-height($hero-height-xs);
                }
            }
        """

    'Tabs' :
        'prefix' : 'wp-partial-tabs'
        'body' : """
            /* ${1:Tabs}
            ------------------------------------------------------------------------------*/
            .${2:tabs}-wrapper {
                .tab-pager {
                    list-style-type: none;
                    margin: 0;
                    padding: 0;
                    text-align: center;
                    > li {
                        display: inline-block;
                        > a {
                            text-decoration: none;
                            &:hover {
                                cursor: pointer;
                            }
                            &.active {
                            }
                        }
                    }
                }
                .tab-content {
                    list-style-type: none;
                    margin: 0;
                    padding: 0;
                    .tab {
                    }
                }
            }
        """
